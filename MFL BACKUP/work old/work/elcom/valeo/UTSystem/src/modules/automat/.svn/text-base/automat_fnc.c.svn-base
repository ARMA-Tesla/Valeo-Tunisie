#include "msxmldom.h" 
#include <toolbox.h>
#include <utility.h>  
#include <multithread/multithread.h>
#include <guid.h>
#include <jig/class/jig_class.h>
#include <language/language.h>
#include "automat.h" 
#include "automat_fnc.h"

extern int					gs_panel[];
extern SElEventFactoryPtr	gs_EventFactory;

static HANDLE gs_hEventStop = NULL;
static DWORD WINAPI Thread_WaitAnimation(LPVOID param);
static SElExceptionPtr CloseAnimation(HANDLE* hThread, HANDLE* hStopEvent);

/*---------------------------------------------------------------------------*/
#define ERROR_SHOW() \
	if(pexception) { \
		if( pexception->GetErrorCode(pexception)<0) /* error */ { \
			SetCtrlVal( gs_panel[AUTOMAT], AUTOMAT_MSG, _("Load test sequence fault!")); \
			SetCtrlVal( gs_panel[AUTOMAT], AUTOMAT_ERROR, pexception->GetErrorMsgPtr(pexception)); } \
		else /* message */ { \
			SetCtrlVal( gs_panel[AUTOMAT], AUTOMAT_MSG, pexception->GetErrorMsgPtr(pexception)); } \
		if(Error) *Error = pexception->GetErrorCode(pexception); \
		EXCDELETE( pexception); } \
	else { \
		SetCtrlVal( gs_panel[AUTOMAT], AUTOMAT_MSG, ""); \
		SetCtrlVal( gs_panel[AUTOMAT], AUTOMAT_ERROR, ""); } 

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "LoadTestSequence"
SElExceptionPtr LoadTestSequence(
	const char* fileXml, 
	STestSequencePtr pTestSeq, 
	SObjListPtr pModules,
	bool_t		reset_panel,
	int32_t*	Error
)
{
	int32_t			error = 0;
	SElExceptionPtr	pexception = NULL;
	HRESULT         hr = 0;
	CAObjHandle     pxml  = 0;
	CAObjHandle     pnode = 0;
	CAObjHandle     pparameter = 0;
	CAObjHandle     pparameter2 = 0;
	const char*     pfile_xml = (fileXml) ? fileXml : "test_form.xml";
	VBOOL           is_xml_success;
	VARIANT         pfile_name_var = CA_VariantEmpty();
	char*           ptext = NULL;
	char*           ptext2 = NULL;
	char         	path[256];
	int            	i = 0;
	STestParam		TestParam = {0};  
	SElEventDataPtr	pdata = NULL;
	char			testdll_path[MAX_PATHNAME_LEN] = "";
	char			picture_path[MAX_PATHNAME_LEN] = "";
	char			buffer[512];
	HANDLE			hThread = NULL;
	SJigPtr			pJig = NULL;
	int32_t			jig_code = 0, 
					jig_required = 0;
	
	EXCCHECKCVI( ProcessSystemEvents());

	ERROR_SHOW();  

	EXCCHECK( eleventdata_new(&pdata));	
	EXCCHECK( ThreadStart(Thread_WaitAnimation, NULL, &hThread, &gs_hEventStop));

	/* unload old test panel */
	EXCCHECK( pTestSeq->UnLoad(pTestSeq));

	/* configure test sequence from XML */
	EXCCHECKMSXML( MSXML_NewDOMDocumentIXMLDOMDocument (NULL, 1, LOCALE_NEUTRAL, 0, &pxml));
	EXCCHECKCOM( CA_VariantSetCString(&pfile_name_var, pfile_xml));
	EXCCHECKMSXMLLOAD( MSXML_IXMLDOMDocumentload (pxml, NULL, pfile_name_var, &is_xml_success));
	EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectSingleNode (pxml, NULL, "//testseq", &pnode));
		
	/* set panel info */
	if(gs_EventFactory && reset_panel)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "global/parameter[name='ProductPartNumber']/value", &pparameter));	
		if(pparameter)
		{
			EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		
			if(ptext)
			{
				sprintf(buffer, "PANEL_MSG_VERSION:%s", ptext);
				EXCCHECK( pdata->SetStringPtr(pdata, buffer));
				EXCCHECK( gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_GUI_INFO_SET", pdata));

				CA_FreeMemory(ptext);
				ptext=NULL;
			}
			EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
			pparameter = 0;
		}

		EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "global/parameter[name='TesterName']/value", &pparameter));
		EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "global/parameter[name='ProductName']/value", &pparameter2));
		if(pparameter)
		{
			EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
			if(pparameter2)
				EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter2, NULL, &ptext2));
		
			sprintf(buffer, "PANEL_MSG_TITLE:%s - %s", (ptext)? ptext:"", (ptext2)? ptext2:"");
			EXCCHECK( pdata->SetStringPtr(pdata, buffer));
			EXCCHECK( gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_GUI_INFO_SET", pdata));
			
			EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
			pparameter = 0;
			CA_FreeMemory(ptext);
			ptext=NULL;

			EXCCHECKCVI( CA_DiscardObjHandle(pparameter2));
			pparameter2 = 0;
			CA_FreeMemory(ptext2);
			ptext2=NULL;
		}
	}
	
	/* JIG code */
	EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "global/parameter[name='JigCode']/value", &pparameter));
	if(pparameter)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		if(ptext && *ptext)
		{
			jig_required = strtol(ptext, NULL, 10);
			
			CA_FreeMemory(ptext);
			ptext=NULL;
		}
		EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
		pparameter = 0;
	}
	else
	{
		EXCTHROW(ERROR_AUTOMAT_NO_JIG_CODE, _("Jig code does not specified in xml file!"));
	}	

	/* check JIG code */
	if(pModules)
	{
		pJig = (SJigPtr)pModules->Get(pModules, MODULE_JIG_CLASS);
		if(pJig)
		{
			EXCCHECK( pJig->jig_GetAttributeInt32(pJig, 0, JIG_ATTR_JIG_CODE, &jig_code));

			if( jig_code == 0)
			{
				EXCTHROW( MSG_AUTOMAT, _("Insert JIG"));
			}
			else if(jig_code != jig_required)
			{
				EXCTHROW( MSG_AUTOMAT, _("Change product"));
			}
		}
	}

	/* test dll name */
	EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "global/parameter[name='ProductTestFile']/value", &pparameter));		
	if ( pparameter )
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		if(ptext && *ptext)
		{
			EXCCHECKCVI( GetProjectDir(testdll_path)); 
			strcat(testdll_path, "\\plugins\\");
			strcat(testdll_path, ptext);
			
			CA_FreeMemory(ptext);
			ptext=NULL;
		}
		
		EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
		pparameter = 0;
	}
	else
	{
		EXCTHROW(ERROR_AUTOMAT_NO_LIBRARY_NAME, _("Library name does not specified in xml file!"));
	}
	
	/* load new test sequence from DLL */ 
	EXCCHECK( pTestSeq->Load(pTestSeq, testdll_path, pModules, gs_EventFactory));

	do
	{
		sprintf(path, "test[@step='%d']/name", ++i); 
		EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, path, &pparameter));
		if(pparameter)
		{
			EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
			if(ptext && *ptext)
			{
				EXCCHECK(pTestSeq->SetTestActive(pTestSeq, ptext, i));
			
				CA_FreeMemory(ptext);
				ptext=NULL;
			}
			EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
			pparameter = 0;
		}
		else
		{
			break;
		}
		
	}while(TRUE);

	/* check validation */
	TestParam.pTicket = pxml;
	
	EXCCHECK( pTestSeq->UsageValidation(pTestSeq, &TestParam));  
	
	/* load test panel */  
	EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "global/parameter[name='ProductPicture']/value", &pparameter));
	if ( pparameter )
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		if(ptext && *ptext)
		{
			EXCCHECKCVI( GetProjectDir(picture_path)); 
			strcat(picture_path, "\\images\\");
			strcat(picture_path, ptext);
			
			CA_FreeMemory(ptext);
			ptext=NULL;
		}		
		EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
		pparameter = 0;
	}
	EXCCHECK( pTestSeq->IniPanel(pTestSeq, picture_path, reset_panel));

Error:
	eleventdata_delete(&pdata);
	CloseAnimation(&hThread, &gs_hEventStop);
	CA_VariantClear(&pfile_name_var);
	if (ptext) CA_FreeMemory(ptext);
	if (pparameter) CA_DiscardObjHandle(pparameter);
	if (pnode) CA_DiscardObjHandle(pnode);
	if (pxml) CA_DiscardObjHandle(pxml);
	if (pexception) ERROR_SHOW();
	EXCRETHROW( pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "CheckDirectory"
static SElExceptionPtr CheckDirectory(const char* directory)
{
	int32_t			   	error = 0;
	SElExceptionPtr    	pexception = NULL; 
	int					size;

	EXCCHECKCVI( FileExists (directory, &size));
	if(size==-1)
	{
		/* create directory */	
		EXCCHECKCVI( MakeDir(directory));
	}
	
Error:
	EXCRETHROW( pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "RunTestSequence"
SElExceptionPtr RunTestSequence(
	const char* fileFormXml, 
	const char* barcode, 
	SAutomatPtr pAutomat, 
	SElEventFactoryPtr pEventFactory
)
{
	int32_t			   	error = 0;
	SElExceptionPtr    	pexception = NULL, 
						ptest_exception = NULL;
	EAutomatMode 		AutomatMode = pAutomat->Mode;
	STestSequencePtr 	pTestSeq = pAutomat->pTestSeq;
	STestParamPtr		pTestParam = &pAutomat->TestParam;
	HRESULT         	hr = 0;
	CAObjHandle     	pxml = 0; 
	CAObjHandle     	pnode = 0; 
	const char*     	pfile_form_xml = (fileFormXml)? fileFormXml : "test_form.xml";
	VBOOL            	is_xml_success = 1;
	VARIANT         	pfile_name_var = CA_VariantEmpty();
	char				project_dir[MAX_PATHNAME_LEN],
						result_dir[MAX_PATHNAME_LEN],
						sdate_time[256],
						buffer[2048] = "",
						AutomatModeStr[AUTOMAT_MODE_SIZE][32] = AUTOMAT_MODE_STR;
	SElEventDataPtr 	pData = NULL; 
	SYSTEMTIME			st;

	/* check destination directory */
	GetLocalTime(&st);
	EXCCHECKCVI(GetProjectDir(project_dir));
	switch(AutomatMode)
	{
		case AUTOMAT_PRODUCTION:
		case AUTOMAT_MASTERPART:
			sprintf(result_dir, PATH_PRODUCTION, project_dir, st.wYear, st.wMonth, st.wDay);
			break;
		case AUTOMAT_QUALITY_MASTER:
		case AUTOMAT_QUALITY_RETEST:
			sprintf(result_dir, PATH_QUALITY, project_dir, st.wYear, st.wMonth, st.wDay);
			break;
		case AUTOMAT_EXPERTISE_SEQUENCE:
		case AUTOMAT_EXPERTISE_GO_MODE:
		case AUTOMAT_EXPERTISE_STEP_MODE:
		case AUTOMAT_EXPERTISE_RNR_STUDY:
			sprintf(result_dir, PATH_EXPERTISE, project_dir, st.wYear, st.wMonth, st.wDay);
			break;
	}
	EXCCHECK( CheckDirectory(result_dir)); 

	/* open xml file */
	EXCCHECKMSXML( MSXML_NewDOMDocumentIXMLDOMDocument (NULL, 1, LOCALE_NEUTRAL, 0, &pxml));
	EXCCHECKCOM( CA_VariantSetCString(&pfile_name_var, pfile_form_xml));
	EXCCHECKMSXMLLOAD( MSXML_IXMLDOMDocumentload (pxml, NULL, pfile_name_var, &is_xml_success));

	/* date_time */
	EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectSingleNode( pxml, NULL, "/testseq/product/mode", &pnode));
	if(pnode)
	{
		char smode[AUTOMAT_MODE_SIZE][32] = AUTOMAT_MODE_DESCRIPTION_STR;

		EXCCHECKMSXML( MSXML_IXMLDOMNodeSettext( pnode, NULL, smode[AutomatMode]));

		EXCCHECKCVI( CA_DiscardObjHandle(pnode));
		pnode = 0;
	}
	/* date_time */
	EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectSingleNode( pxml, NULL, "/testseq/product/date_time", &pnode));
	if(pnode)
	{
		sprintf(sdate_time, DATE_TIME_FORMAT, st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);      
		EXCCHECKMSXML( MSXML_IXMLDOMNodeSettext( pnode, NULL, sdate_time));

		EXCCHECKCVI( CA_DiscardObjHandle(pnode));
		pnode = 0;
	}
	/* Barcode */
	EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectSingleNode( pxml, NULL, "/testseq/product/barcode", &pnode));
	if(pnode)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeSettext( pnode, NULL, (barcode)? barcode:""));

		EXCCHECKCVI( CA_DiscardObjHandle(pnode));
		pnode = 0;
	}

	/* prepare test parameter data */
	pTestParam->pTicket = pxml;
	pTestParam->shift_id = pAutomat->shift_id;
	sprintf(pTestParam->Barcode, barcode);
	sprintf(pTestParam->Time, "%02d.%02d.%02d", st.wHour, st.wMinute, st.wSecond);
	sprintf(pTestParam->Date, "%04d.%02d.%02d", st.wYear, st.wMonth, st.wDay);
	sprintf(pTestParam->TicketDirPath, result_dir);
	
	EXCCHECK( eleventdata_new(&pData));

	switch(AutomatMode)
	{
		case AUTOMAT_PRODUCTION:
		case AUTOMAT_MASTERPART:
		case AUTOMAT_QUALITY_MASTER:
		case AUTOMAT_QUALITY_RETEST:
		case AUTOMAT_EXPERTISE_SEQUENCE:
		case AUTOMAT_EXPERTISE_RNR_STUDY:
			
			ptest_exception = pTestSeq->RunAll(pTestSeq, pTestParam, FALSE);
			
			/* pulse event */
			sprintf(buffer, "%s;%s;%s", AutomatModeStr[AutomatMode], pTestParam->TicketFilePath, (ptest_exception==NULL)? "OK":"FAULT");
			EXCCHECK( pData->SetStringPtr(pData, buffer));
			EXCCHECK( pEventFactory->PulseEvent(pEventFactory, "EVNT_TEST_SEQUENCE_END", pData));  
			break;
		case AUTOMAT_EXPERTISE_GO_MODE:
			
			ptest_exception = pTestSeq->RunAll(pTestSeq, pTestParam, TRUE);
			
			/* pulse event */
			sprintf(buffer, "%s;%s;%s", AutomatModeStr[AutomatMode], pTestParam->TicketFilePath, (ptest_exception==NULL)? "OK":"FAULT");
			EXCCHECK( pData->SetStringPtr(pData, buffer));
			EXCCHECK( pEventFactory->PulseEvent(pEventFactory, "EVNT_TEST_SEQUENCE_END", pData)); 
			break;
		case AUTOMAT_EXPERTISE_STEP_MODE:
			ptest_exception = pTestSeq->StepStart(pTestSeq, pTestParam, TRUE);  
			break;
	}	
	EXCCHECK(ptest_exception);
	
Error:
	eleventdata_delete(&pData);
	CA_VariantClear(&pfile_name_var);
	EXCRETHROW( pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::StepTestSequence"
SElExceptionPtr StepTestSequence(
	const char* fileXml, 
	SAutomatPtr pAutomat, 
	SElEventFactoryPtr pEventFactory, 
	int step_mode,
	bool_t* is_active,
	bool_t* last_step
)
{
	SElExceptionPtr		pexception = NULL;
	int32_t				error = 0;
	STestSequencePtr 	pTestSeq = pAutomat->pTestSeq;
	bool_t				b_last_step = FALSE; 
	SElEventDataPtr 	pData = NULL;  
	char				buffer[1024]= ""; 
	
	if(pTestSeq && pTestSeq->StepSequenceActive(pTestSeq))
	{
		if(is_active) *is_active = TRUE;
		if(last_step) *last_step = FALSE;

		switch(step_mode)
		{
			case STEP_SEQUENCE_REPEAT:
				EXCCHECK( pTestSeq->StepRepeat(pTestSeq));   
				break;
			case STEP_SEQUENCE_NEXT:
				EXCCHECK( pTestSeq->StepNext(pTestSeq, &b_last_step));
				if(last_step) *last_step = b_last_step;
				if(b_last_step)
				{
					if(pEventFactory)
					{
						sprintf(buffer, "EXPERTISE_STEP_MODE;%s;", fileXml); 
						EXCCHECK( eleventdata_new(&pData));
						EXCCHECK( pData->SetStringPtr(pData, buffer));
						EXCCHECK( pEventFactory->PulseEvent(pEventFactory, "EVNT_TEST_SEQUENCE_END", pData));
					}
				}
				break;		
			case STEP_SEQUENCE_BACK:
				EXCCHECK( pTestSeq->StepBack(pTestSeq));   
				break;
			case STEP_SEQUENCE_CANCEL:
				EXCCHECK( pTestSeq->StepStop(pTestSeq)); 
			
				if(pEventFactory)
				{
					sprintf(buffer, "EXPERTISE_STEP_MODE;%s;", fileXml); 
					EXCCHECK( eleventdata_new(&pData));
					EXCCHECK( pData->SetStringPtr(pData, buffer));
					EXCCHECK( pEventFactory->PulseEvent(pEventFactory, "EVNT_TEST_SEQUENCE_END", pData));
				}
				break;
		}
	}
	else
	{
		if(is_active) *is_active = FALSE;
		if(last_step) *last_step = FALSE;
	}
				
Error:
	eleventdata_delete(&pData);    
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::Thread_WaitAnimation"
static DWORD WINAPI Thread_WaitAnimation(LPVOID param)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	int				i = 0; 
	
	EXCCHECKCVI( SetCtrlAttribute (gs_panel[AUTOMAT], AUTOMAT_ANIMATION, ATTR_VISIBLE, TRUE));
	
	while(TRUE)
	{
		if (WaitForSingleObject(gs_hEventStop, 100) == WAIT_OBJECT_0)
		{
			ExitThread(THREAD_EXIT_CODE);
		}
		
		EXCCHECKCVI( SetCtrlIndex (gs_panel[AUTOMAT], AUTOMAT_ANIMATION, i++));
		if(i > 11) 
			i = 0;	
	};
	
Error:
	EXCDISPLAY( pexception);
	return 0;
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::CloseAnimation"
static SElExceptionPtr CloseAnimation(HANDLE* hThread, HANDLE* hStopEvent)
{
	SElExceptionPtr		pexception = NULL;
	int32_t				error = 0;

	EXCCHECK( ThreadStop( hThread, hStopEvent)); 

	EXCCHECKCVI( SetCtrlAttribute (gs_panel[AUTOMAT], AUTOMAT_ANIMATION, ATTR_VISIBLE, FALSE));

Error:   
	EXCRETHROW( pexception);  
}
