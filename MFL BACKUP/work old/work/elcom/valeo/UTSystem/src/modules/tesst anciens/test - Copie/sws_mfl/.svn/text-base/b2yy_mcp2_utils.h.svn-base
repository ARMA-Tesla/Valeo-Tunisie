#if !defined(__B2YY_MCP_UTILS_H__)
#define __B2YY_MCP_UTILS_H__

#include <test/eltest.h>
#include <eltypes.h>
#include <elerror.h>

#ifdef __cplusplus
    extern "C" {
#endif 

#define DEFAULT_MAX_RESISTANCE  9.99e+39
#define TIMEOUT_DEFAULT			10000
#define TEST_ERROR_HEAT_LEVER	-2222
/* BFFA2008  No explicit path exists between the two channels.
 * BFFA200C  The channels are explicitly connected.
 */
#define checkSwtch(fCall) \
	if (error = (fCall), (error = (error<0 && error!=0xBFFA2008 && error!=0xBFFA200C) ? error : VI_SUCCESS)) \
		{ goto Error; }  else error = error

#define CONNECT_BLOWER(position) \
	do { \
		if(position==1){ EXCCHECK(psensors->SetState(psensors, "JIG_50", TRUE));} \
		else if(position==2){ EXCCHECK(psensors->SetState(psensors, "JIG_51", TRUE));} \
		else if(position==3){ EXCCHECK(psensors->SetState(psensors, "JIG_52", TRUE));} \
		else if(position==4){ EXCCHECK(psensors->SetState(psensors, "JIG_53", TRUE));} \
	}while(0)

#define CONNECT_BLOWER_DMM(position) \
	do { \
		if(position==1){ checkSwtch( IviSwtch_Connect (vi_SW5, "ch4", "com0"));} \
		else if(position==2){ checkSwtch( IviSwtch_Connect (vi_SW5, "ch5", "com0"));} \
		else if(position==3){ checkSwtch( IviSwtch_Connect (vi_SW5, "ch6", "com0"));} \
		else if(position==4){ checkSwtch( IviSwtch_Connect (vi_SW5, "ch7", "com0"));} \
	}while(0)

#define DISCONNECT_BLOWERS \
	do { \
		EXCCHECK(psensors->SetState(psensors, "JIG_50", FALSE)); \
		EXCCHECK(psensors->SetState(psensors, "JIG_51", FALSE)); \
		EXCCHECK(psensors->SetState(psensors, "JIG_52", FALSE)); \
		EXCCHECK(psensors->SetState(psensors, "JIG_53", FALSE)); \
	} while(0)

#define DISCONNECT_BLOWERS_DMM \
	do { \
		checkSwtch( IviSwtch_DisconnectAll (vi_SW5)); \
	} while(0)

#define IF_NOT_CONNECT_BLOWER(position) \
	do { \
		uint32_t state=0; \
		if(position==1){ EXCCHECK(psensors->GetState(psensors, "JIG_50", &state));} \
		else if(position==2){ EXCCHECK(psensors->GetState(psensors, "JIG_51", &state));} \
		else if(position==3){ EXCCHECK(psensors->GetState(psensors, "JIG_52", &state));} \
		else if(position==4){ EXCCHECK(psensors->GetState(psensors, "JIG_53", &state));} \
		if( state==FALSE) {

#define IF_NOT_CONNECT_BLOWER_DMM(position) \
	do { \
		ViInt32 path_capability=0; \
		if(position==1){ checkSwtch( IviSwtch_CanConnect (vi_SW5, "ch4", "com0", &path_capability));} \
		else if(position==2){ checkSwtch( IviSwtch_CanConnect (vi_SW5, "ch5", "com0", &path_capability));} \
		else if(position==3){ checkSwtch( IviSwtch_CanConnect (vi_SW5, "ch6", "com0", &path_capability));} \
		else if(position==4){ checkSwtch( IviSwtch_CanConnect (vi_SW5, "ch7", "com0", &path_capability));} \
		if( path_capability==IVISWTCH_VAL_PATH_AVAILABLE) {

#define TIMEOUT_INIT() 	clock_t	_start_clock = clock()

#define TIMEOUT_CHECK(timeout) \
	if ( ((clock() - _start_clock) / (double)CLOCKS_PER_SEC) > ((double)timeout/1000.0) ) { EXCTHROW( TEST_ERR_TIMEOUT, "Button Timeout"); } else

typedef enum _EBlowerPosition
{
	POSITION_0 = 0,
	POSITION_1,
	POSITION_2,
	POSITION_3,
	POSITION_4
} EBlowerPosition;

typedef enum _EBlowerState
{
	BLOWER_RELEASE = 0,
	BLOWER_ACTIVE
} EBlowerState;

#define WAIT_FOR_BLOWER_STATE(state) \
	EXCCHECK(WaitForBlowerState(pTID, ptester, state))

#define WAIT_FOR_BLOWER(position) \
	EXCCHECK(WaitForBlowerPosition(pTID, ptester, position))

#define READ_BLOWER(position, voltage, current) \
	EXCCHECK(ReadBlowerPosition(pTID, position, voltage, current))

SElExceptionPtr	WaitForBlowerState( 
	void* pTID,
	STesterPtr ptester,
	EBlowerState state
);
SElExceptionPtr	WaitForBlowerPosition( 
	void* pTID,
	STesterPtr ptester,
	EBlowerPosition	position
);
SElExceptionPtr	ReadBlowerPosition( 
	void*			pTID,
	EBlowerPosition	position,
	double*			voltage,
	double*			current
);

void ElSleep(DWORD time);

#define BUTTON_HFS		0
#define BUTTON_HRW		1
#define BUTTON_AC		2

#define CHECK_BUTTON(button_id) CHECK_HIGHLIGHT(##button_id)

#define DRAW_HIGHLIGHT(resource) DRAW_HIGHLIGHT_##resource##(0)

#define CHECK_HIGHLIGHT(button_id) \
	DRAW_HIGHLIGHT_##button_id##( (pexception) ? 2 : 1)

#define DRAW_HIGHLIGHT_BUTTON_HFS(pid)		DISPLAY_CIRCLE(131, 172, 25, pid)
#define DRAW_HIGHLIGHT_BUTTON_HRW(pid)		DISPLAY_CIRCLE(620, 172, 25, pid)
#define DRAW_HIGHLIGHT_BUTTON_AC(pid)		DISPLAY_CIRCLE(374, 202, 25, pid)
#define DRAW_HIGHLIGHT_BUTTON_REC(pid)		DISPLAY_CIRCLE(374, 150, 25, pid)
#define DRAW_HIGHLIGHT_DEFROST(pid)			DISPLAY_CIRCLE(450, 230, 25, pid)
#define DRAW_HIGHLIGHT_BLOWER_0(pid)		DISPLAY_CIRCLE(96, 155, 12, pid)
#define DRAW_HIGHLIGHT_BLOWER_1(pid)		DISPLAY_CIRCLE(110, 139, 12, pid)
#define DRAW_HIGHLIGHT_BLOWER_2(pid)		DISPLAY_CIRCLE(131, 134, 12, pid)
#define DRAW_HIGHLIGHT_BLOWER_3(pid)		DISPLAY_CIRCLE(152, 139, 12, pid)
#define DRAW_HIGHLIGHT_BLOWER_4(pid)		DISPLAY_CIRCLE(168, 155, 12, pid)
#define DRAW_HIGHLIGHT_HEATER_RIGHT(pid)	DISPLAY_ARROW_RIGHT(654, 120, 25, (pid))
#define DRAW_HIGHLIGHT_HEATER_LEFT(pid)		DISPLAY_ARROW_LEFT(604, 120, 25, (pid))
#define DRAW_HIGHLIGHT_BLOWER_RIGHT(pid)	DISPLAY_ARROW_RIGHT(160, 120, 25, (pid))
#define DRAW_HIGHLIGHT_BLOWER_LEFT(pid)		DISPLAY_ARROW_LEFT(110, 120, 25, (pid))

#if defined(__cplusplus)
    } /* extern "C" */
#endif

#endif /* __B2YY_MCP_UTILS_H__ */
