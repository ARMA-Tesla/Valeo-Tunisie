#if !defined(__TESTER_H__)
#define __TESTER_H__

#include <eltypes.h>
#include <exception/Exception.h>
#include <windows.h>
#include <sensors/sensors.h>
#include <eventfactory/EventFactory.h>

#if defined(__cplusplus) || defined(__cplusplus__)
	extern "C" {
#endif

#define EVNT_TESTER_BUTTON_PRESSED_OK		"EVNT_TESTER_BUTTON_PRESSED_OK"
#define EVNT_TESTER_BUTTON_PRESSED_NOK		"EVNT_TESTER_BUTTON_PRESSED_NOK"
#define EVNT_TESTER_BUTTON_PRESSED_MENU		"EVNT_TESTER_BUTTON_PRESSED_MENU"
#define EVNT_TESTER_BUTTON_PRESSED_LABEL	"EVNT_TESTER_BUTTON_PRESSED_LABEL"
#define EVNT_TESTER_BUTTON_PRESSED_DOWNTIME	"EVNT_TESTER_BUTTON_PRESSED_DOWNTIME"

typedef struct _STester
{
	SElExceptionPtr (*Initialize)(struct _STester*	me, const char*	fileName);
	SElExceptionPtr (*RegisterSensorCallbacks)( struct _STester* me);

	SElExceptionPtr (*MaskClose)(struct _STester* me, int32_t timeout, bool_t wait_end);
	SElExceptionPtr (*IsMaskClosed)(struct _STester* me, int32_t timeout);
	SElExceptionPtr (*MaskOpen)(struct _STester* me, int32_t timeout, bool_t wait_end);
	SElExceptionPtr (*IsMaskOpened)(struct _STester* me, int32_t timeout);
	SElExceptionPtr (*OkNokCheck)(struct _STester* me, int32_t timeout, bool_t* ok);
	SElExceptionPtr (*NokCheck)(struct _STester* me, int32_t timeout);
	SElExceptionPtr (*TesterBeep)(struct _STester* me, int32_t time);

	SElExceptionPtr (*SetSensor)(struct _STester* me, const char* sensorId, uint32_t value);
	SElExceptionPtr (*GetSensor)(struct _STester* me, const char* sensorId, uint32_t* value);
	SElExceptionPtr (*SetSensorCallback)(struct _STester* me, const char* sensorId, SensorCallbackFnc_t fCall, void* pData);
	
/*******************************************
 * PRIVATE
 *******************************************/
	SDIOSensorsPtr		sensorAPI;
	SElEventFactoryPtr	eventAPI;
	void*				pLogicalNames;
	int32_t				LogicalCounts;
	HANDLE				hThreadMaskClose;
	HANDLE				hThreadMaskOpen;
	char				path[512]; /* xml config path */

	void*				LogApi;
	uint32_t			LogChannel;

} STester, *STesterPtr;

SElExceptionPtr	tester_new(STesterPtr* pTester);
SElExceptionPtr	tester_delete(STesterPtr* pTester);

#define TESTER_ERROR_INVALID_PARAMETER		-10001
#define TESTER_ERROR_TIMEOUT				-10002
#define TESTER_ERROR_STILL_ACTIVE			-10003
#define TESTER_ERROR_WAIT_TIMEOUT			-10004

#if defined(__cplusplus) || defined(__cplusplus__)
	}
#endif

#endif /* __TESTER_H__*/ 
