#include "msxmldom.h"
#include "test_helper_functions.h"
#include <windows.h>
#include <ivibridge/ivibridge.h>
#include <calibration/calibration.h>
#include <test/eltest.h>
#include <IviDcPwr.h>
#include <IviDmm.h>
#include <IviSwtch.h>
#include <guid.h>
#include <toolbox.h>
#include <utility.h>
#include <sdk/mmsystem.h>

#pragma warning( push)
#pragma warning( disable: 4996)

#define MAX_LENGTH_CHANNEL_NAME		32
#define MAX_NB_OF_CHANNELS			16

/* 
 * BFFA2008  No explicit path exists between the two channels.
 * BFFA200C  The channels are explicitly connected.
 */
#define checkSwtch(fCall) \
	if (error = (fCall), (error = (error<0 && error!=0xBFFA2008 && error!=0xBFFA200C) ? error : VI_SUCCESS)) \
		{ goto Error; }  else error = error

typedef struct _SLogicNames
{
	char		name[MAX_LENGTH_CHANNEL_NAME+1];
	char		physical[MAX_LENGTH_CHANNEL_NAME+1];
	/* switching */
	bool_t		is_active;
	char		psw1[MAX_LENGTH_CHANNEL_NAME+1]; /* channel switch */
	char		psw2[MAX_LENGTH_CHANNEL_NAME+1];
	bool_t		is_low_current;
	char		pswc1[MAX_LENGTH_CHANNEL_NAME+1]; /* low current meas switch */
	char		pswc2[MAX_LENGTH_CHANNEL_NAME+1];
	/* calibration */
	char		scale1[MAX_LENGTH_CHANNEL_NAME+1]; /* hi curent */
	char		scale2[MAX_LENGTH_CHANNEL_NAME+1]; /* low current */
} SLogicNames, *SLogicNamesPtr;

typedef struct _SPowerConfig
{
	SLogicNames		channels[MAX_NB_OF_CHANNELS];
	int32_t			channelsSize;
	char			calibration_file[MAX_LENGTH_CHANNEL_NAME+1];
} SPowerConfig, *SPowerConfigPtr;

typedef enum _ESwitchFnc
{
	ESF_CONNECT = 0,
	ESF_DISCONNECT,
	ESF_DISCONNECT_ALL,
	ESF_CHECK_PATH,
	ESF_SLEEP
} ESwitchFnc;

static SPowerConfig		gs_PowerConfig = {0,0,0};

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "LoadConfiguration"
static SElExceptionPtr LoadConfiguration(
   const char*   fileName,
   CAObjHandle	*xml
)
{
	SElExceptionPtr pexception = NULL;
	static CAObjHandle	pxml  = 0;

	if(pxml==0)
	{
		int32_t			error = 0;
		HRESULT         hr = 0;
		const char*     pfile_name = (fileName) ? fileName : "\\test.xml";
		VBOOL         	is_xml_success;
		VARIANT         pfile_name_var = CA_VariantEmpty();
		char			path[MAX_PATHNAME_LEN];

		EXCCHECKCVI( GetModuleDir (__CVIUserHInst, path)); 
		strcat(path, pfile_name);
		
		EXCCHECKMSXML( MSXML_NewDOMDocumentIXMLDOMDocument (NULL, 1, LOCALE_NEUTRAL, 0, &pxml));
		EXCCHECKCVI( CA_VariantSetCString(&pfile_name_var, path));
		EXCCHECKMSXMLLOAD( MSXML_IXMLDOMDocumentload (pxml, NULL, pfile_name_var, &is_xml_success)); 
		EXCCHECKCVI( CA_VariantClear(&pfile_name_var));
	}
	
Error:
	if(pexception && pxml)
	{
		CA_DiscardObjHandle(pxml);
		pxml = 0;
	}
	if(xml) *xml = pxml;
	EXCRETHROW( pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "LoadSourceConfiguration"
static SElExceptionPtr LoadSourceConfiguration(
   const char*   fileName
)
{
	SElExceptionPtr pexception = NULL;
	int32_t			error = 0;
	HRESULT         hr = 0;
	CAObjHandle     pxml  = 0;
	CAObjHandle     plist = 0;
	CAObjHandle     pnode = 0;
	CAObjHandle     pparameter = 0;
	char*         	ptext= NULL;

	EXCCHECK( LoadConfiguration(fileName, &pxml));  
		
	if(pxml)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectSingleNode (pxml, NULL, "//calibration_file", &pparameter));
		if(pparameter!=0)
		{
			EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
			if(ptext)
			{
				strncpy(gs_PowerConfig.calibration_file, ptext, MAX_LENGTH_CHANNEL_NAME);	 
				CA_FreeMemory(ptext);
				ptext=NULL;
			}
			EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
			pparameter = 0;
		}
		else
			EXCTHROW(-1, "Calibration file not specified!");

		EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectNodes (pxml, NULL, "//power/channel", &plist));   
		if(plist)
		{
			SLogicNamesPtr	plogic_names = NULL;
			long			length = 0;	
			int				i;
		
			EXCCHECKMSXML( MSXML_IXMLDOMNodeListGetlength (plist, NULL, &length));
			
			if(length==0)
				EXCTHROW(-1, "Source channels are not specified in a config xml!");

			gs_PowerConfig.channelsSize = length;
			plogic_names = gs_PowerConfig.channels;
		
			EXCCHECKMSXML( MSXML_IXMLDOMNodeListreset (plist, NULL));
			
			for(i=0; i<length; i++, plogic_names++)
			{
				EXCCHECKMSXML( MSXML_IXMLDOMNodeListnextNode (plist, NULL, &pnode));
				if(pnode)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "@logical", &pparameter));
					if(pparameter)
					{
						EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
						if(ptext)
						{
							strncpy(plogic_names->name, ptext, MAX_LENGTH_CHANNEL_NAME);	 
							CA_FreeMemory(ptext);
							ptext=NULL;
						}
						EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
						pparameter = 0;
					}

					EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "@physical", &pparameter));
					if(pparameter)
					{
						EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
						if(ptext)
						{
							strncpy(plogic_names->physical, ptext, MAX_LENGTH_CHANNEL_NAME);	 
							CA_FreeMemory(ptext);
							ptext=NULL;
						}
						EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
						pparameter = 0;
					}

					EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "@psw1", &pparameter));
					if(pparameter)
					{
						EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
						if(ptext)
						{
							strncpy(plogic_names->psw1, ptext, MAX_LENGTH_CHANNEL_NAME);	 
							CA_FreeMemory(ptext);
							ptext=NULL;
						}
						EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
						pparameter = 0;
					}

					EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "@psw2", &pparameter));
					if(pparameter)
					{
						EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
						if(ptext)
						{
							strncpy(plogic_names->psw2, ptext, MAX_LENGTH_CHANNEL_NAME);	 
							CA_FreeMemory(ptext);
							ptext=NULL;
						}
						EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
						pparameter = 0;
					}

					EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "@pswc1", &pparameter));
					if(pparameter)
					{
						EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
						if(ptext)
						{
							strncpy(plogic_names->pswc1, ptext, MAX_LENGTH_CHANNEL_NAME);	 
							CA_FreeMemory(ptext);
							ptext=NULL;
						}
						EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
						pparameter = 0;
					}

					EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "@pswc2", &pparameter));
					if(pparameter)
					{
						EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
						if(ptext)
						{
							strncpy(plogic_names->pswc2, ptext, MAX_LENGTH_CHANNEL_NAME);	 
							CA_FreeMemory(ptext);
							ptext=NULL;
						}
						EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
						pparameter = 0;
					}

					EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "@scale1", &pparameter));
					if(pparameter)
					{
						EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
						if(ptext)
						{
							strncpy(plogic_names->scale1, ptext, MAX_LENGTH_CHANNEL_NAME);	 
							CA_FreeMemory(ptext);
							ptext=NULL;
						}
						EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
						pparameter = 0;
					}

					EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "@scale2", &pparameter));
					if(pparameter)
					{
						EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
						if(ptext)
						{
							strncpy(plogic_names->scale2, ptext, MAX_LENGTH_CHANNEL_NAME);	 
							CA_FreeMemory(ptext);
							ptext=NULL;
						}
						EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
						pparameter = 0;
					}
				}
			}
		}
	}

Error:
	if (pparameter) CA_DiscardObjHandle(pparameter);    
	if (pnode) CA_DiscardObjHandle(pnode);
	if (plist) CA_DiscardObjHandle(plist);
	EXCRETHROW( pexception);
}

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "PowerDisconnect"
SElExceptionPtr PowerDisconnect(
	SObjListPtr		pModules,
	const char*		xml_file,
	const char*		channel
)
{
	ViStatus		error = VI_SUCCESS;
	SElExceptionPtr pexception = NULL;
	ViSession		vi_PSW = 0;
	ViSession		vi_POWER = 0;
	SIviBridgePtr	pIvi = (SIviBridgePtr)pModules->Get(pModules, MODULE_IVIBRIDGE);
	
	EXCCHECK( pIvi->GetSession( pIvi, "PSW", &vi_PSW));
	EXCCHECK( pIvi->GetSession( pIvi, "POWER", &vi_POWER));

	/* handle physical power source */
	{
		ViBoolean	enabled;
		char		*channelSrc = NULL;
		int			i;
		bool_t		disable_src = TRUE;

		if(gs_PowerConfig.channelsSize==0)
			EXCCHECK( LoadSourceConfiguration(xml_file));

		for(i=0; i<gs_PowerConfig.channelsSize; i++)
		{
			if(0==strcmp(gs_PowerConfig.channels[i].name, channel))
				break;
		}

		if(i==gs_PowerConfig.channelsSize)
		{
			char serror[256];

			sprintf(serror, "Invalid power channel name '%s'!", channel);
			EXCTHROW(-1, serror);
		}
	
		channelSrc = gs_PowerConfig.channels[i].physical;
		gs_PowerConfig.channels[i].is_active = FALSE;

		for(i=0; i<gs_PowerConfig.channelsSize; i++)
		{
			if(0==strcmp(gs_PowerConfig.channels[i].physical, channelSrc)
				&& gs_PowerConfig.channels[i].is_active==TRUE)
			{
				disable_src = FALSE;
				break;
			}
		}

		checkErr( IviDCPwr_GetAttributeViBoolean ( vi_POWER, channelSrc, IVIDCPWR_ATTR_OUTPUT_ENABLED, &enabled));
		if(disable_src && enabled==VI_TRUE)
		{
			checkErr( IviDCPwr_ConfigureOutputEnabled( vi_POWER, channelSrc, VI_FALSE));
		}
	}
	
	/* handle channel */
	{	
		int		i;

		for(i=0; i<gs_PowerConfig.channelsSize; i++)
		{
			if(0==strcmp(gs_PowerConfig.channels[i].name, channel))
				break;
		}

		if(i==gs_PowerConfig.channelsSize)
		{
			char serror[256];

			sprintf(serror, "Invalid power channel name '%s'!", channel);
			EXCTHROW(-1, serror);
		}

		error = IviSwtch_Disconnect( vi_PSW, gs_PowerConfig.channels[i].psw1, gs_PowerConfig.channels[i].psw2);
		checkErr((error==IVISWTCH_ERROR_NO_SUCH_PATH)? VI_SUCCESS:error);
	}

Error:
	IVI_CHECK_ERR(error);
	EXCRETHROW( pexception);
}

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "PowerSetPower"
SElExceptionPtr PowerSetPower(
	SObjListPtr		pModules,
	const char*		xml_file,
	const char*		channel,
	double			voltage,
	double			current
)
{
	ViStatus		error = VI_SUCCESS;
	SElExceptionPtr pexception = NULL;
	ViSession		vi_PSW = 0;
	ViSession		vi_POWER = 0;
	SIviBridgePtr	pIvi = (SIviBridgePtr)pModules->Get(pModules, MODULE_IVIBRIDGE);
	
	EXCCHECK( pIvi->GetSession( pIvi, "PSW", &vi_PSW));
	EXCCHECK( pIvi->GetSession( pIvi, "POWER", &vi_POWER));

	/* handle channel */
	{
		ViInt32	state = 0;
		int		i;

		if(gs_PowerConfig.channelsSize==0)
			EXCCHECK( LoadSourceConfiguration(xml_file));

		for(i=0; i<gs_PowerConfig.channelsSize; i++)
		{
			if(0==strcmp(gs_PowerConfig.channels[i].name, channel))
				break;
		}

		if(i==gs_PowerConfig.channelsSize)
		{
			char serror[256];

			sprintf(serror, "Invalid power channel name '%s'!", channel);
			EXCTHROW(-1, serror);
		}

		checkErr( IviSwtch_CanConnect(vi_PSW, gs_PowerConfig.channels[i].psw1, gs_PowerConfig.channels[i].psw2, &state));
		if(state==IVISWTCH_VAL_PATH_AVAILABLE)
			checkErr( IviSwtch_Connect(vi_PSW, gs_PowerConfig.channels[i].psw1, gs_PowerConfig.channels[i].psw2));
	}
	
	/* handle physical power source */
	{
		ViReal64	voltage_set;
		ViReal64	current_set;
		ViBoolean	enabled;
		char		*channelSrc = NULL;
		int			i;

		for(i=0; i<gs_PowerConfig.channelsSize; i++)
		{
			if(0==strcmp(gs_PowerConfig.channels[i].name, channel))
				break;
		}

		if(i==gs_PowerConfig.channelsSize)
		{
			char serror[256];

			sprintf(serror, "Invalid power channel name '%s'!", channel);
			EXCTHROW(-1, serror);
		}
	
		channelSrc = gs_PowerConfig.channels[i].physical;

		checkErr( IviDCPwr_GetAttributeViReal64(vi_POWER, channelSrc, IVIDCPWR_ATTR_VOLTAGE_LEVEL, &voltage_set));
		if ( voltage_set != voltage )
		{
			checkErr( IviDCPwr_ConfigureOutputRange(vi_POWER, channelSrc, IVIDCPWR_VAL_RANGE_VOLTAGE, voltage));
			checkErr( IviDCPwr_ConfigureVoltageLevel(vi_POWER, channelSrc, voltage));
		}

		checkErr( IviDCPwr_GetAttributeViReal64(vi_POWER, channelSrc, IVIDCPWR_ATTR_CURRENT_LIMIT, &current_set));
		if ( current_set != current )
		{
			checkErr( IviDCPwr_ConfigureCurrentLimit(vi_POWER, channelSrc, IVIDCPWR_VAL_CURRENT_REGULATE, current));
		}

		checkErr( IviDCPwr_GetAttributeViBoolean(vi_POWER, channelSrc, IVIDCPWR_ATTR_OUTPUT_ENABLED, &enabled));
		if ( enabled == VI_FALSE ) 
		{
			checkErr( IviDCPwr_ConfigureOutputEnabled(vi_POWER, channelSrc, VI_TRUE));
			timeBeginPeriod(1);
			Sleep(200);
			timeEndPeriod(1);
		}

		gs_PowerConfig.channels[i].is_active = TRUE;
	}

Error:
	IVI_CHECK_ERR(error);
	EXCRETHROW( pexception);
}

/*----------------------------------------------------------------------------*/
/* channel: Channel1L; Channel1H; Channel2L; Channel2H; Channel3L; Channel3H; Channel4L; Channel4H 
 * scale H: current2A; current200mA
 * scale L: current2mA 
 */
#undef __FUNC__
#define __FUNC__ "MeasCurrent"
SElExceptionPtr MeasCurrent(
	SObjListPtr		pModules,
	const char*		xml_file,
	const char*		channel, /* power source channel */
	const char*		channelDmm,
	double			valueExpected, /* posible ranges: 2mA; 200mA; 2A */
	double*			value, /* measured current value A */
	uint32_t		delay
)
{
	SElExceptionPtr pexception = NULL;
	int32_t			error = 0;
	SIviBridgePtr	pIvi = (SIviBridgePtr)pModules->Get(pModules, MODULE_IVIBRIDGE);
	SCalibrationPtr	pCalib = (SCalibrationPtr)pModules->Get(pModules, MODULE_CALIBRATION);
	ViSession		vi_PSW = 0;
	ViSession		vi_DMM = 0;
	ViSession		vi_SW5 = 0;
	const char*		pscale = NULL;
	ViReal64		meas;
	int				i;

	if(value)
		*value = 0.0;

	EXCCHECK( pIvi->GetSession( pIvi, "PSW", &vi_PSW));
	EXCCHECK( pIvi->GetSession( pIvi, "DMM", &vi_DMM));
	EXCCHECK( pIvi->GetSession( pIvi, "SW5", &vi_SW5));

	/* switch dmm */
	checkErr( IviSwtch_DisconnectAll(vi_SW5));		
	checkErr( IviSwtch_Connect(vi_SW5, channelDmm, "com0"));

	if(gs_PowerConfig.channelsSize==0)
		EXCCHECK( LoadSourceConfiguration(xml_file));

	for(i=0; i<gs_PowerConfig.channelsSize; i++)
	{
		if(0==strcmp(gs_PowerConfig.channels[i].name, channel))
			break;
	}

	if(i==gs_PowerConfig.channelsSize)
	{
		char serror[256];

		sprintf(serror, "Invalid power channel name '%s'!", channel);
		EXCTHROW(-1, serror);
	}

	if(gs_PowerConfig.channels[i].is_active==FALSE)
		EXCTHROW(-1, "Power channel is disabled!");

	/* set dmm range */
	if(valueExpected<=0.002) /* 2mA */
	{
		ViInt32	state = 0;

		pscale = "current2mA";

		/* switch low current */
		checkErr( IviSwtch_CanConnect(vi_PSW, 
									  gs_PowerConfig.channels[i].pswc1, 
									  gs_PowerConfig.channels[i].pswc2, 
									  &state));

		if(state==IVISWTCH_VAL_PATH_AVAILABLE)
		{
			checkErr( IviSwtch_Connect(vi_PSW, 
									   gs_PowerConfig.channels[i].pswc1, 
									   gs_PowerConfig.channels[i].pswc2));
			
			gs_PowerConfig.channels[i].is_low_current = TRUE;
		}

		checkErr( IviDmm_ConfigureMeasurement( vi_DMM, IVIDMM_VAL_DC_VOLTS, 0.2, 0.00001));
	}
	else if(valueExpected<=0.2) /* 200mA */
	{
		pscale = "current200mA";

		gs_PowerConfig.channels[i].is_low_current = FALSE;

		checkErr( IviDmm_ConfigureMeasurement(vi_DMM, IVIDMM_VAL_DC_VOLTS, 0.02, 0.000001));
	}
	else if(valueExpected<=2.0) /* 2A */
	{
		pscale = "current2A";

		gs_PowerConfig.channels[i].is_low_current = FALSE;

		checkErr( IviDmm_ConfigureMeasurement(vi_DMM, IVIDMM_VAL_DC_VOLTS, 0.2, 0.00001));
	}
	else
	{
		EXCTHROW( -1, "Expected value out of range. Value >2.0A");
	}

	timeBeginPeriod(1);
	Sleep(delay);
	timeEndPeriod(1);

	checkErr( IviDmm_Read(vi_DMM, 2000, &meas));
	if(IsNotANumber(meas)) 
		EXCTHROW(-1, "Measured value out of range");
	
	EXCCHECK( pCalib->Load(pCalib, gs_PowerConfig.calibration_file));
	EXCCHECK( pCalib->Calculate(pCalib, 
								(gs_PowerConfig.channels[i].is_low_current)? gs_PowerConfig.channels[i].scale2:gs_PowerConfig.channels[i].scale1, 
								pscale,
								meas,
								&meas));

	if(value)
		*value = meas;

Error:
	IVI_CHECK_ERR(error);

	IviSwtch_DisconnectAll(vi_SW5);

	if(gs_PowerConfig.channels[i].is_low_current)
	{
		IviSwtch_Disconnect(vi_PSW, 
							gs_PowerConfig.channels[i].pswc1, 
							gs_PowerConfig.channels[i].pswc2);

		gs_PowerConfig.channels[i].is_low_current = FALSE;
	}
	EXCRETHROW( pexception);
}

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "SwtchFnc"
SElExceptionPtr SwtchFnc(
	SObjListPtr		pModules, 
	const char*		xml_file,
	const char*		id,
	ESwitchFnc		fnc_id,
	bool_t*			exist	
)
{
	SElExceptionPtr pexception = NULL;
	int32_t			error = 0;
	HRESULT         hr = 0;
	SIviBridgePtr	pIvi = (SIviBridgePtr)pModules->Get(pModules, MODULE_IVIBRIDGE);
	ViSession		vi_SW = 0;
	CAObjHandle     pxml = 0;
	CAObjHandle     pentry = 0;
	CAObjHandle     pswitch = 0;
	CAObjHandle     pparam = 0;
	char*			ptext = NULL;
	char*			pchannel1 = NULL;
	char*			pchannel2 = NULL;
	ESwitchFnc		_fnc_id = fnc_id;
	uint32_t		delay = 0;

	EXCCHECK( LoadConfiguration(xml_file, &pxml));

	if(pxml)
	{
		char path[256] = "";

		switch(fnc_id)
		{
			case ESF_CONNECT:
				sprintf(path, "//switching/entry[@id='%s']/connect/switch", id);
				break;
			case ESF_DISCONNECT:
				sprintf(path, "//switching/entry[@id='%s']/disconnect/switch", id);
				break;
			case ESF_CHECK_PATH:
				sprintf(path, "//switching/entry[@id='%s']/check_path/switch", id);
				break;
		}

		EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectNodes (pxml, NULL, path, &pentry));
		if(pentry)
		{
			EXCCHECKMSXML( MSXML_IXMLDOMNodeListreset(pentry, NULL));
			EXCCHECKMSXML( MSXML_IXMLDOMNodeListnextNode(pentry, NULL, &pswitch));

			if(pswitch==0)
			{
				char serror[256];

				sprintf(serror, "Switch Error: Entry id='%s' is empty!\nOr xpath does not exist: '%s'", id, path);
				EXCTHROW(-1, serror);
			}

			while(pswitch)
			{
				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pswitch, NULL, "@id", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &ptext));
					if(ptext)
					{
						EXCCHECK( pIvi->GetSession( pIvi, ptext, &vi_SW));

						CA_FreeMemory(ptext); 
						ptext = NULL;
					}					
					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pswitch, NULL, "@time", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &ptext));			
					if(ptext)
					{
						delay = strtoul(ptext, NULL, 10);
						CA_FreeMemory(ptext); 
						ptext = NULL;
					}
					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pswitch, NULL, "@channel1", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &pchannel1));			
					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pswitch, NULL, "@channel2", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &pchannel2));			
					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				/* function modification */
				_fnc_id = fnc_id;
				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pswitch, NULL, "@fnc", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &ptext));			
					if(ptext)
					{
						if (strcmp(ptext, "CONNECT")==0)
							_fnc_id = ESF_CONNECT;
						else if(strcmp(ptext, "DISCONNECT")==0)
							_fnc_id = ESF_DISCONNECT;
						else if(strcmp(ptext, "DISCONNECT_ALL")==0)
							_fnc_id = ESF_DISCONNECT_ALL;
						else if(strcmp(ptext, "SLEEP")==0)
							_fnc_id = ESF_SLEEP;
						else 
						{
							char serror[256];

							sprintf(serror, "Switch Error: Function not defined '%s'", ptext);
							EXCTHROW(-1, serror);
						}
					}
					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}
				
				switch(_fnc_id)
				{
					case ESF_CONNECT:
						checkSwtch( IviSwtch_Connect(vi_SW, pchannel1, pchannel2));
						break;
					case ESF_DISCONNECT:
						checkSwtch( IviSwtch_Disconnect(vi_SW, pchannel1, pchannel2));
						break;
					case ESF_DISCONNECT_ALL:
						checkSwtch( IviSwtch_DisconnectAll(vi_SW));
						break;
					case ESF_CHECK_PATH:
						{
							ViInt32 path_capability;
							checkSwtch( IviSwtch_CanConnect (vi_SW, pchannel1, pchannel2, &path_capability));
							if(exist)
								*exist = !(path_capability==IVISWTCH_VAL_PATH_AVAILABLE);
						}
						break;
					case ESF_SLEEP:
						timeBeginPeriod(1);
						Sleep((DWORD)delay);
						timeEndPeriod(1);
						break;
				}

				if(pchannel1)
				{
					CA_FreeMemory(pchannel1); 
					pchannel1 = NULL;
				}
				if(pchannel2)
				{
					CA_FreeMemory(pchannel2); 
					pchannel2 = NULL;
				}

				CA_DiscardObjHandle(pswitch); pswitch = 0;
				EXCCHECKMSXML( MSXML_IXMLDOMNodeListnextNode(pentry, NULL, &pswitch));
			}
		}
		else
		{
			char serror[256];

			sprintf(serror, "Switch Error: Entry id='%s' not found!", id);
			EXCTHROW(-1, serror);
		}
	}

Error:
	IVI_CHECK_ERR(error);
	if (pentry) CA_DiscardObjHandle(pentry);
	if (pswitch) CA_DiscardObjHandle(pswitch);
	if (pparam) CA_DiscardObjHandle(pparam);
	EXCRETHROW( pexception);
}

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "SwtchConnect"
SElExceptionPtr SwtchConnect(
	SObjListPtr		pModules, 
	const char*		xml_file,
	const char*		id
)
{
	SElExceptionPtr pexception = NULL;

	EXCCHECK( SwtchFnc(pModules, xml_file, id, ESF_CONNECT, NULL));

Error:
	EXCRETHROW( pexception);
}

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "SwtchDisconnect"
SElExceptionPtr SwtchDisconnect(
	SObjListPtr		pModules, 
	const char*		xml_file,
	const char*		id
)
{
	SElExceptionPtr pexception = NULL;

	EXCCHECK( SwtchFnc(pModules, xml_file, id, ESF_DISCONNECT, NULL));

Error:
	EXCRETHROW( pexception);
}

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "SwtchCheckPath"
SElExceptionPtr SwtchCheckPath(
	SObjListPtr		pModules, 
	const char*		xml_file,
	const char*		id,
	bool_t*			exist
)
{
	SElExceptionPtr pexception = NULL;

	EXCCHECK( SwtchFnc(pModules, xml_file, id, ESF_CHECK_PATH, exist));

Error:
	EXCRETHROW( pexception);
}

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "SwtchSequence"
SElExceptionPtr SwtchSequence(
	SObjListPtr		pModules, 
	const char*		xml_file,
	const char*		id
)
{
	SElExceptionPtr pexception = NULL;
	HRESULT         hr = 0;
	CAObjHandle		pxml = 0;
	CAObjHandle		pseq = 0;
	CAObjHandle		pfnc = 0;
	CAObjHandle		pparam = 0;
	char*			ptext = NULL;
	char*			pentry_id = NULL;
	char*			pchannel = NULL;
	uint32_t		delay = 0;
	bool_t			exist;
	bool_t			skip = FALSE;
	double			voltage = 13.5,
					current = 1.0;

	EXCCHECK( LoadConfiguration(xml_file, &pxml));

	if(pxml)
	{
		char path[256] = "";

		sprintf(path, "//switching/sequence[@id='%s']/fnc", id);
		EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectNodes (pxml, NULL, path, &pseq));
		if(pseq)
		{
			EXCCHECKMSXML( MSXML_IXMLDOMNodeListreset(pseq, NULL));
			EXCCHECKMSXML( MSXML_IXMLDOMNodeListnextNode(pseq, NULL, &pfnc));

			while(pfnc)
			{
				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pfnc, NULL, "@entry_id", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &pentry_id));
					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pfnc, NULL, "@channel", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &pchannel));
					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pfnc, NULL, "@delay", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &ptext));
					if(ptext)
					{
						delay = strtoul(ptext, NULL, 10);

						CA_FreeMemory(ptext); 
						ptext = NULL;
					}

					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pfnc, NULL, "@voltage", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &ptext));
					if(ptext)
					{
						voltage = strtod(ptext, NULL);

						CA_FreeMemory(ptext); 
						ptext = NULL;
					}

					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pfnc, NULL, "@current", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &ptext));
					if(ptext)
					{
						current = strtod(ptext, NULL);

						CA_FreeMemory(ptext); 
						ptext = NULL;
					}

					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode(pfnc, NULL, "@id", &pparam));
				if(pparam)
				{
					EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext(pparam, NULL, &ptext));
					if(ptext)
					{
						if(0==strcmp(ptext, "CONNECT"))
						{
							if(!skip)
							{
								if(0==strcmp(pentry_id, "POWER"))
								{
									EXCCHECK( PowerSetPower(pModules, xml_file, pchannel, voltage, current));
								}
								else
									EXCCHECK( SwtchConnect(pModules, xml_file, pentry_id));
							}
						}
						else if(0==strcmp(ptext, "DISCONNECT"))
						{
							if(!skip)
							{
								if(0==strcmp(pentry_id, "POWER"))
								{
									EXCCHECK( PowerDisconnect(pModules, xml_file, pchannel));
								}
								else
									EXCCHECK( SwtchDisconnect(pModules, xml_file, pentry_id));
							}
						}
						else if(0==strcmp(ptext, "IF_CONNECT"))
						{
							EXCCHECK( SwtchCheckPath(pModules, xml_file, pentry_id, &exist));
							skip = !(exist);
						}
						else if(0==strcmp(ptext, "IF_NOT_CONNECT"))
						{
							EXCCHECK( SwtchCheckPath(pModules, xml_file, pentry_id, &exist));
							skip = (exist);
						}
						else if(0==strcmp(ptext, "END_IF"))
						{
							skip = FALSE;
						}
						else if(0==strcmp(ptext, "SLEEP"))
						{
							if(!skip)
							{
								timeBeginPeriod(1);
								Sleep((DWORD)delay);
								timeEndPeriod(1);
							}
						}
						else
						{
							char serror[256];

							sprintf(serror, "Switch Sequencer Error: Function not defined '%s'", ptext);
							EXCTHROW(-1, serror);
						}

						CA_FreeMemory(ptext); 
						ptext = NULL;
					}					
					CA_DiscardObjHandle(pparam);
					pparam = 0;
				}

				if(pentry_id)
				{
					CA_FreeMemory(pentry_id); 
					pentry_id = NULL;
				}

				if(pchannel)
				{
					CA_FreeMemory(pchannel); 
					pchannel = NULL;
				}

				CA_DiscardObjHandle(pfnc); pfnc = 0;
				EXCCHECKMSXML( MSXML_IXMLDOMNodeListnextNode(pseq, NULL, &pfnc));
			}
		}
		else
		{
			char serror[256];

			sprintf(serror, "Switch Sequencer Error: Sequence id='%s' not found!", id);
			EXCTHROW(-1, serror);
		}
	}

Error:
	if(pseq) CA_DiscardObjHandle(pseq);
	if(pfnc) CA_DiscardObjHandle(pfnc);
	if(pparam) CA_DiscardObjHandle(pparam);
	EXCRETHROW( pexception);
}

#pragma warning( pop)

