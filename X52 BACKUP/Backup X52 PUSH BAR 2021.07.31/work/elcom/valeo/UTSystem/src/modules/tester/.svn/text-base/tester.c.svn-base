#include "tester.h"
#include "msxmldom.h"
#include <guid.h>
#include <time.h>
#include <utility.h>
#include <sdk/mmsystem.h>
#include <multithread/multithread.h>

#define MAX_LENGTH_SENSOR_LOGICAL_NAME				64

#define TIMEOUT_INIT() 	clock_t	_start_clock = clock();

#define TIMEOUT_CHECK(timeout) \
	if ( timeout>0 && ((clock() - _start_clock) / (double)CLOCKS_PER_SEC) > (timeout/1000.0) ) { EXCTHROW( TESTER_ERROR_TIMEOUT, "Timeout"); } else

typedef struct _SLogicName
{
	char		aliasName[MAX_LENGTH_SENSOR_LOGICAL_NAME+1];
	char		logicalName[MAX_LENGTH_SENSOR_LOGICAL_NAME+1];
} SLogicName, *SLogicNamePtr;

typedef struct _SLogicNameList
{
	SLogicNamePtr	pLigicNames;
	int32_t			ListCount;
} SLogicNameList, *SLogicNameListPtr;

static SElExceptionPtr Initialize(struct _STester*	me, const char*	fileName);
static SElExceptionPtr RegisterSensorCallbacks( struct _STester* me);
static SElExceptionPtr MaskClose(struct _STester* me, int32_t timeout, bool_t wait_end);
static SElExceptionPtr IsMaskClosed(struct _STester* me, int32_t timeout);
static SElExceptionPtr MaskOpen(struct _STester* me, int32_t timeout, bool_t wait_end);
static SElExceptionPtr IsMaskOpened(struct _STester* me, int32_t timeout);
static SElExceptionPtr OkNokCheck(struct _STester* me, int32_t timeout, bool_t* ok);
static SElExceptionPtr NokCheck(struct _STester* me, int32_t timeout);
static SElExceptionPtr TesterBeep(struct _STester* me, int32_t time);
static SElExceptionPtr SetSensor(struct _STester* me, const char* sensorId, uint32_t value);
static SElExceptionPtr GetSensor(struct _STester* me, const char* sensorId, uint32_t* value);
static SElExceptionPtr SetSensorCallback(struct _STester* me, const char* sensorId, SensorCallbackFnc_t fCall, void* pData);

static SElExceptionPtr CallbackFncButtonOk(const char* name, uint32_t state, void* pData);
static SElExceptionPtr CallbackFncButtonNok(const char* name, uint32_t state, void* pData);
static SElExceptionPtr CallbackFncButtonMenu(const char* name, uint32_t state, void* pData);
static SElExceptionPtr CallbackFncButtonLabel(const char* name, uint32_t state, void* pData);
static SElExceptionPtr CallbackFncButtonDowntime(const char* name, uint32_t state, void* pData);
static SElExceptionPtr CallbackFncButtonStart(const char* name, uint32_t state, void* pData);
static SElExceptionPtr CallbackFncButtonTotalStop(const char* name, uint32_t state, void* pData);


/*---------------------------------------------------------------------------*/
#undef  __FUNC__
#define __FUNC__ "tester_new"
 SElExceptionPtr tester_new(STesterPtr*	pTester)
{
	SElExceptionPtr    	pexception = NULL;
	int32_t				error = 0;

	*pTester = calloc( 1, sizeof(STester));
	EXCCHECKALLOC( *pTester);

	(*pTester)->Initialize = Initialize;
	(*pTester)->SetSensor = SetSensor;
	(*pTester)->GetSensor = GetSensor;
	(*pTester)->MaskClose = MaskClose;
	(*pTester)->IsMaskClosed = IsMaskClosed;
	(*pTester)->MaskOpen = MaskOpen;
	(*pTester)->IsMaskOpened = IsMaskOpened;
	(*pTester)->OkNokCheck = OkNokCheck;
	(*pTester)->NokCheck = NokCheck;
	(*pTester)->TesterBeep = TesterBeep;
	(*pTester)->RegisterSensorCallbacks = RegisterSensorCallbacks;
	(*pTester)->SetSensorCallback = SetSensorCallback;

Error:
	EXCRETHROW( pexception); 
}/* vline_new */

/*---------------------------------------------------------------------------*/
#undef  __FUNC__
#define __FUNC__ "tester_delete"
SElExceptionPtr	tester_delete(STesterPtr* pTester)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	int32_t			status;

	if ( pTester && *pTester )
	{
		(*pTester)->eventAPI = NULL;
		(*pTester)->sensorAPI = NULL;

		if((*pTester)->hThreadMaskClose)
		{
			EXCCHECKWIN( TerminateThread((*pTester)->hThreadMaskClose, 0));
			CloseHandle((*pTester)->hThreadMaskClose);
		}

		if((*pTester)->hThreadMaskOpen)
		{
			EXCCHECKWIN( TerminateThread((*pTester)->hThreadMaskOpen, 0));
			CloseHandle((*pTester)->hThreadMaskOpen);
		}

		free( (*pTester)->pLogicalNames);
		(*pTester)->pLogicalNames = NULL;
		(*pTester)->LogicalCounts = 0;
		
		free( *pTester);
		*pTester = NULL;
	}

Error:
	EXCRETHROW( pexception); 
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::RegisterSensorCallbacks"
static SElExceptionPtr RegisterSensorCallbacks( struct _STester* me)
{
	SElExceptionPtr	pexception = NULL;

	EXCCHECK( me->SetSensorCallback(me, "BUTTON_OK", CallbackFncButtonOk, me));
	EXCCHECK( me->SetSensorCallback(me, "BUTTON_NOK", CallbackFncButtonNok, me));
	EXCCHECK( me->SetSensorCallback(me, "BUTTON_MENU", CallbackFncButtonMenu, me));
	EXCCHECK( me->SetSensorCallback(me, "BUTTON_LABEL", CallbackFncButtonLabel, me));
	EXCCHECK( me->SetSensorCallback(me, "BUTTON_DOWNTIME", CallbackFncButtonDowntime, me));

	EXCCHECK( me->SetSensorCallback(me, "BUTTON_START", CallbackFncButtonStart, me));
	EXCCHECK( me->SetSensorCallback(me, "BUTTON_TOTAL_STOP", CallbackFncButtonTotalStop, me));

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
static int CompareFnc(const void* v1, const void* v2)
{
	SLogicNamePtr	value1 = (SLogicNamePtr) v1;
	SLogicNamePtr	value2 = (SLogicNamePtr) v2;
	
	return strcmp(value1->aliasName, value2->aliasName);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::Initialize"
static SElExceptionPtr Initialize
(
	struct _STester*	me,
	const char*		fileName
)
{
	SElExceptionPtr	pexception = NULL;
	CAObjHandle		xml_doc = 0;
	CAObjHandle		sensors_list = 0;
	CAObjHandle		sensor = 0;
	CAObjHandle		alias = 0;
	VBOOL			is_xml_success = 1;
	char*			alias_name = NULL;
	char*			logical_name = NULL;
	const char*     pfile_name = (fileName && fileName[0] != '\0') ? fileName : "modules\\tester.xml";
	char			module_dir[512];
	VARIANT         pfile_name_var = CA_VariantEmpty();
	SLogicNamePtr	plogical_list = NULL;
	int32_t			count = 0,
					error = 0;
	HRESULT			hr;

	strcpy( me->path, pfile_name);

	EXCCHECKCOM( MSXML_NewDOMDocumentIXMLDOMDocument (NULL, 1, LOCALE_NEUTRAL, 0, &xml_doc));
	EXCCHECKCVI( CA_VariantSetCString(  &pfile_name_var, pfile_name));
	EXCCHECKMSXMLLOAD( MSXML_IXMLDOMDocumentload (xml_doc, NULL, pfile_name_var, &is_xml_success));

	EXCCHECKCOM( MSXML_IXMLDOMDocumentselectNodes (xml_doc, NULL,
						"//module[@id='"MODULE_TESTER"']/Sensors/Sensor",
						&sensors_list));
	EXCCHECKCOM( MSXML_IXMLDOMNodeListreset (sensors_list, NULL));
	EXCCHECKCOM( MSXML_IXMLDOMNodeListnextNode (sensors_list, NULL, &sensor));
	
	while (sensor != 0)
	{
		EXCCHECKCOM( MSXML_IXMLDOMNodeselectSingleNode(sensor, NULL, "@name", &alias));
		EXCCHECKCOM( MSXML_IXMLDOMNodeGettext (alias, NULL, &alias_name));
		EXCCHECKCOM( MSXML_IXMLDOMNodeGettext (sensor, NULL, &logical_name));
		
		plogical_list = realloc(plogical_list, (count + 1) * sizeof(SLogicName));
		EXCCHECKALLOC( plogical_list);
		memset(plogical_list + count, 0, sizeof(SLogicName));
		strncpy((plogical_list + count)->aliasName, alias_name, MAX_LENGTH_SENSOR_LOGICAL_NAME);
		strncpy((plogical_list + count)->logicalName, logical_name, MAX_LENGTH_SENSOR_LOGICAL_NAME);
		count++;
		
		CA_FreeMemory(alias_name); alias_name = NULL;
		CA_FreeMemory(logical_name); logical_name = NULL;
		CA_DiscardObjHandle(sensor); sensor = 0;
		
		EXCCHECKCOM( MSXML_IXMLDOMNodeListnextNode (sensors_list, NULL, &sensor));
	}
	
	qsort(plogical_list, count, sizeof(SLogicName), CompareFnc);
	
	me->pLogicalNames = (void*) plogical_list;
	me->LogicalCounts = count;
	
Error:
	if (alias) CA_DiscardObjHandle(alias);
	if (sensor) CA_DiscardObjHandle(sensor);
	if (sensors_list) CA_DiscardObjHandle(sensors_list);
	if (xml_doc) CA_DiscardObjHandle(xml_doc);
	if (alias_name) CA_FreeMemory(alias_name);
	if (logical_name) CA_FreeMemory(logical_name);
	CA_VariantClear(&pfile_name_var);
	
	if (pexception)
	{
		free(plogical_list);
		plogical_list = NULL;
		me->pLogicalNames = NULL;
		me->LogicalCounts = 0;
	}
	
	EXCRETHROW(pexception);
}

typedef struct _SMaskThreadData{
	struct _STester*	me;
	int32_t				timeout;
} SMaskThreadData, *SMaskThreadDataPtr;

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "Thread_TesterMaskClose"
static DWORD WINAPI Thread_TesterMaskClose(LPVOID param)
{
	SMaskThreadDataPtr	pthread_data = (SMaskThreadDataPtr)param;
	STesterPtr		me = pthread_data->me;
	uint32_t		timeout = pthread_data->timeout;
	SElExceptionPtr	pexception = NULL;
	uint32_t		status_mask_closed,
					status_mask_locked,
					status_cylinder_front,
					status_cylinder_rear;
	bool_t			is_closed = FALSE,
					is_locked = FALSE,
					is_cylinder_in_front = FALSE;
	
	TIMEOUT_INIT();
	
	while( TRUE)
	{
		if(!is_cylinder_in_front)
		{
			EXCCHECK( me->SetSensor(me, "MASK_FRONT", 1));
			EXCCHECK( me->SetSensor(me, "MASK_REAR", 0));

			EXCCHECK( me->GetSensor(me, "MASK_CYLINDER_FRONT", &status_cylinder_front));
			EXCCHECK( me->GetSensor(me, "MASK_CYLINDER_REAR", &status_cylinder_rear));

			if(status_cylinder_front && !status_cylinder_rear)
			{
				is_cylinder_in_front = TRUE;
			}
		}
		else if(!is_closed)
		{
			EXCCHECK( me->GetSensor(me, "MASK_CLOSED", &status_mask_closed));

			if(status_mask_closed)
			{
				is_closed = TRUE;
			}
		}
		else if(!is_locked)
		{
			EXCCHECK( me->SetSensor(me, "MASK_LOCK", 1));
		
			EXCCHECK( me->GetSensor(me, "MASK_LOCKED", &status_mask_locked));
			
			if( status_mask_locked)
			{
				is_locked = TRUE;
				break;
			}
		}
		TIMEOUT_CHECK( timeout);
		Sleep(100);
	};

Error:
	free(pthread_data);
	if(pexception)
	{
		EXCDBGSTR(pexception);
		ExitThread(THREAD_ERROR_CODE);
	}
	else
		ExitThread(THREAD_EXIT_CODE);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::MaskClose"
static SElExceptionPtr MaskClose(struct _STester* me, int32_t timeout, bool_t wait_end)
{
	SElExceptionPtr	pexception = NULL;
	SMaskThreadDataPtr	pthread_data = NULL;
		
	pthread_data = (SMaskThreadDataPtr)calloc(1, sizeof(SMaskThreadData)); 
	EXCCHECKALLOC( pthread_data);

	pthread_data->me = me;
	pthread_data->timeout = timeout;

	if(me->hThreadMaskClose)
	{
		CloseHandle(me->hThreadMaskClose);
		me->hThreadMaskClose = NULL;
	}
	EXCCHECK( ThreadStart(Thread_TesterMaskClose, pthread_data, &me->hThreadMaskClose, NULL));

	if(wait_end)
	{
		EXCCHECK( me->IsMaskClosed(me, timeout + 2000));
	}

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::IsMaskClosed"
static SElExceptionPtr IsMaskClosed(struct _STester* me, int32_t timeout)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			status;
		
	pexception = ThreadStatus(me->hThreadMaskClose, timeout, &status);
	if(pexception)
	{
		EXCDELETE(pexception);
		EXCTHROW(TESTER_ERROR_WAIT_TIMEOUT, "Thread Handle Status: WAIT_TIMEOUT");
	}
	else
	{
		switch(status)
		{
			case THREAD_STATUS_STILL_ACTIVE:
				EXCTHROW( TESTER_ERROR_STILL_ACTIVE, "Thread Handle Status: STILL_ACTIVE");
				break;
			case THREAD_STATUS_ERROR_CODE:
				EXCTHROW( TESTER_ERROR_TIMEOUT, "Timeout");
				break;
		}
	}

Error:
	EXCRETHROW(pexception);
}

/*----------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "Thread_TesterMaskOpen"
static DWORD WINAPI Thread_TesterMaskOpen(LPVOID param)
{
	SMaskThreadDataPtr	pthread_data = (SMaskThreadDataPtr)param;
	STesterPtr		me = pthread_data->me;
	SElExceptionPtr	pexception = NULL;
	uint32_t		timeout = pthread_data->timeout;
	uint32_t		status_mask_locked,
					status_cylinder_front,
					status_cylinder_rear;
	bool_t			is_open = FALSE,
					is_unlocked = FALSE,
					is_cylinder_in_rear = FALSE;

	TIMEOUT_INIT();

	while( TRUE)
	{
		if(!is_unlocked)
		{
			EXCCHECK( me->SetSensor(me, "MASK_LOCK", 0));

			EXCCHECK( me->GetSensor(me, "MASK_LOCKED", &status_mask_locked));

			if(status_mask_locked==FALSE)
			{
				is_unlocked = TRUE;
			}
		}
		else if(!is_open)
		{
			EXCCHECK( me->SetSensor(me, "MASK_FRONT", 0));
			EXCCHECK( me->SetSensor(me, "MASK_REAR", 1));

			EXCCHECK( me->GetSensor(me, "MASK_CYLINDER_REAR", &status_cylinder_rear));
			EXCCHECK( me->GetSensor(me, "MASK_CYLINDER_FRONT", &status_cylinder_front));
			
			if(!status_cylinder_front && status_cylinder_rear)
			{
				is_open = TRUE;	
				break;
			}
		}
		TIMEOUT_CHECK( timeout);
		Sleep(100);
	};

Error:
	free(pthread_data);
	if(pexception)
	{
		EXCDBGSTR(pexception);
		ExitThread(THREAD_ERROR_CODE);
	}
	else
		ExitThread(THREAD_EXIT_CODE);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::MaskOpen"
static SElExceptionPtr MaskOpen(struct _STester* me, int32_t timeout, bool_t wait_end)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	SMaskThreadDataPtr	pthread_data = NULL;
		
	pthread_data = (SMaskThreadDataPtr)calloc(1, sizeof(SMaskThreadData)); 
	EXCCHECKALLOC( pthread_data);

	pthread_data->me = me;
	pthread_data->timeout = timeout;

	/* terminate close mask thread */
	if(me->hThreadMaskClose)
	{
		EXCCHECKWIN( TerminateThread(me->hThreadMaskClose, THREAD_EXIT_CODE));
	}

	if(me->hThreadMaskOpen)
	{
		CloseHandle(me->hThreadMaskOpen);
		me->hThreadMaskOpen = NULL;
	}
	EXCCHECK( ThreadStart(Thread_TesterMaskOpen, pthread_data, &me->hThreadMaskOpen, NULL));

	if(wait_end)
	{
		EXCCHECK( me->IsMaskOpened(me, timeout + 2000));
	}

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::IsMaskOpened"
static SElExceptionPtr IsMaskOpened(struct _STester* me, int32_t timeout)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			status;
		
	EXCCHECK( ThreadStatus(me->hThreadMaskOpen, timeout, &status));

	switch(status)
	{
		case THREAD_STATUS_STILL_ACTIVE:
			EXCTHROW( -1, "Thread Handle Status: STILL_ACTIVE");
			break;
		case THREAD_STATUS_ERROR_CODE:
			EXCTHROW( TESTER_ERROR_TIMEOUT, "Timeout");
			break;
	}

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::OkNokCheck"
static SElExceptionPtr OkNokCheck(struct _STester* me, int32_t timeout, bool_t* ok)
{
	SElExceptionPtr	pexception = NULL;
	uint32_t		button_ok,
					button_nok;

	TIMEOUT_INIT();
	
	if(ok) *ok = FALSE;

	EXCCHECK( me->SetSensor(me, "INDICATOR_OK", 1));
	EXCCHECK( me->SetSensor(me, "INDICATOR_NOK", 1));

	while(TRUE)
	{
		EXCCHECK( me->GetSensor(me, "BUTTON_OK", &button_ok));
		EXCCHECK( me->GetSensor(me, "BUTTON_NOK", &button_nok));
		
		if(button_ok && !button_nok)
		{
			if(ok) *ok = TRUE;
			break;
		}
		else if(!button_ok && button_nok)
		{
			if(ok) *ok = FALSE;
			break;
		}
		
		TIMEOUT_CHECK( timeout);
		Sleep(100);
	};

Error:
	EXCIGNORE( TESTER_ERROR_TIMEOUT);
	me->SetSensor(me, "INDICATOR_OK", 0);
	me->SetSensor(me, "INDICATOR_NOK", 0);
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::NokCheck"
static SElExceptionPtr NokCheck(struct _STester* me, int32_t timeout)
{
	SElExceptionPtr	pexception = NULL;
	uint32_t		button_nok;

	TIMEOUT_INIT();

	EXCCHECK( me->SetSensor(me, "INDICATOR_NOK", 1));

	while(TRUE)
	{
		EXCCHECK( me->GetSensor(me, "BUTTON_NOK", &button_nok));
		
		if(button_nok)
			break;

		if(timeout>=0)
			TIMEOUT_CHECK( timeout);

		Sleep(100);
	};

Error:
	EXCIGNORE( TESTER_ERROR_TIMEOUT);
	me->SetSensor(me, "INDICATOR_NOK", 0);
	EXCRETHROW(pexception);
}

typedef struct _SBeepThreadData{
	struct _STester*	me;
	int32_t				time;
} SBeepThreadData, *SBeepThreadDataPtr;

/*----------------------------------------------------------------------------*/
#undef  __FUNC__
#define __FUNC__ "BeepThreadFunc"
#if defined(_CVI_)
	int CVICALLBACK BeepThreadFunc (void *pArguments)
#else
	unsigned __cdecl BeepThreadFunc( void* pArguments )
#endif
{
	SElExceptionPtr		pexception = NULL;
	SBeepThreadDataPtr	pthread_data = (SBeepThreadDataPtr)pArguments;
	
	EXCCHECK( pthread_data->me->SetSensor(pthread_data->me, "TESTER_BEEP", 1)); 

	timeBeginPeriod(1);
	Sleep(pthread_data->time); 
	timeEndPeriod(1);

	EXCCHECK( pthread_data->me->SetSensor(pthread_data->me, "TESTER_BEEP", 0));
	
Error:
	free( pthread_data);
	EXCDBGSTR( pexception);
#if defined(_CVI_)
	CmtExitThreadPoolThread (0);
#else
    _endthread( 0 );
#endif
    return 0;
}	/* BeepThreadFunc */

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::TesterBeep"
static SElExceptionPtr TesterBeep(struct _STester* me, int32_t time)
{
	SElExceptionPtr		pexception = NULL;
	SBeepThreadDataPtr	pthread_data = NULL;
		
	pthread_data = (SBeepThreadDataPtr)calloc(1, sizeof(SBeepThreadData)); 
	EXCCHECKALLOC( pthread_data);

	pthread_data->me = me;
	pthread_data->time = time;

	_beginthread( BeepThreadFunc, 0, pthread_data);

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::SetSensor"
static SElExceptionPtr SetSensor
(
	struct _STester* me,
	const char*		sensorId,
	uint32_t		value
)
{
	SElExceptionPtr	pexception = NULL;
	char*			plogic_name = "";
	SLogicName		tmp;
	SLogicNamePtr	palias_pair = NULL;
	char*			plogical_name = NULL;
	
	/* convert sensorId to logical name in tester */
	strcpy( tmp.aliasName, sensorId);
	
	palias_pair = bsearch( &tmp,
						   me->pLogicalNames,
						   me->LogicalCounts,
						   sizeof(SLogicName),
						   CompareFnc);

	plogical_name = (palias_pair) ? palias_pair->logicalName : (char*) sensorId;

	if( me->sensorAPI)
		EXCCHECK( me->sensorAPI->SetState(me->sensorAPI, plogical_name, value));

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::SetSensorCallback"
static SElExceptionPtr SetSensorCallback(
	struct _STester* me, 
	const char* sensorId, 
	SensorCallbackFnc_t fCall,
	void* pData
)
{
	SElExceptionPtr	pexception = NULL;
	char*			plogic_name = "";
	SLogicName		tmp;
	SLogicNamePtr	palias_pair = NULL;
	char*			plogical_name = NULL;
	
	/* convert sensorId to logical name in tester */
	strcpy( tmp.aliasName, sensorId);
	
	palias_pair = bsearch( &tmp,
						   me->pLogicalNames,
						   me->LogicalCounts,
						   sizeof(SLogicName),
						   CompareFnc);

	plogical_name = (palias_pair) ? palias_pair->logicalName : (char*) sensorId;

	if( me->sensorAPI)
		EXCCHECK( me->sensorAPI->RegisterCallback( me->sensorAPI, plogical_name, fCall, pData));

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"Tester::GetSensor"
static SElExceptionPtr GetSensor
(
	struct _STester*	me,
	const char*		sensorId,
	uint32_t*		value
)
{
	SElExceptionPtr	pexception = NULL;
	SLogicName		tmp;
	SLogicNamePtr	palias_pair = NULL;
	char*			plogical_name = NULL;
	
	/* TODO: convert sensorId to logical name in tester */
	strcpy( tmp.aliasName, sensorId);
	
	palias_pair = bsearch( &tmp,
						   me->pLogicalNames,
						   me->LogicalCounts,
						   sizeof(SLogicName),
						   CompareFnc);

	if (value == NULL)
	{
		EXCTHROW(TESTER_ERROR_INVALID_PARAMETER, "Parameter value is NULL");
	}

	plogical_name = (palias_pair)? palias_pair->logicalName : (char*) sensorId;
	
	if( me->sensorAPI)
		EXCCHECK( me->sensorAPI->GetState(me->sensorAPI, plogical_name, value));

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"CallbackFncButtonOk"
static SElExceptionPtr CallbackFncButtonOk(const char* name, uint32_t state, void* pData)
{
	SElExceptionPtr	pexception = NULL;
	STesterPtr		me = (STesterPtr)pData;

	if(state==1 && me->eventAPI)
		EXCCHECK( me->eventAPI->PulseEvent(me->eventAPI, EVNT_TESTER_BUTTON_PRESSED_OK, NULL));

	if(state==1)
	{
		HWND hwnd_excp = NULL;
		HWND hwnd_exit = NULL;
	
		/* confirm excption */
		hwnd_excp = FindWindow(NULL, "Exception");
		if(hwnd_excp)
		{
			SendMessage(hwnd_excp, WM_COMMAND, IDYES, BN_CLICKED);
		}
		else
		{
			/* confirm exit */
			hwnd_exit = FindWindow(NULL, "Exit");
			if(hwnd_exit)
				SendMessage(hwnd_exit, WM_COMMAND, IDYES, BN_CLICKED);
		}
	}

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"CallbackFncButtonNok"
static SElExceptionPtr CallbackFncButtonNok(const char* name, uint32_t state, void* pData)
{
	SElExceptionPtr	pexception = NULL;
	STesterPtr		me = (STesterPtr)pData;

	if( state==1 && me->eventAPI)
		EXCCHECK( me->eventAPI->PulseEvent(me->eventAPI, EVNT_TESTER_BUTTON_PRESSED_NOK, NULL));

	if(state==1)
	{
		HWND hwnd_exit = NULL;

		/* storno exit */
		hwnd_exit = FindWindow(NULL, "Exit");
		if(hwnd_exit)
			SendMessage(hwnd_exit, WM_COMMAND, IDNO, BN_CLICKED);
	}

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"CallbackFncButtonMenu"
static SElExceptionPtr CallbackFncButtonMenu(const char* name, uint32_t state, void* pData)
{
	SElExceptionPtr	pexception = NULL;
	STesterPtr		me = (STesterPtr)pData;

	if( state==1 && me->eventAPI)
		EXCCHECK( me->eventAPI->PulseEvent(me->eventAPI, EVNT_TESTER_BUTTON_PRESSED_MENU, NULL));

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"CallbackFncButtonLabel"
static SElExceptionPtr CallbackFncButtonLabel(const char* name, uint32_t state, void* pData)
{
	SElExceptionPtr	pexception = NULL;
	STesterPtr		me = (STesterPtr)pData;

	if( state==1 && me->eventAPI)
		EXCCHECK( me->eventAPI->PulseEvent(me->eventAPI, EVNT_TESTER_BUTTON_PRESSED_LABEL, NULL));

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"CallbackFncButtonDowntime"
static SElExceptionPtr CallbackFncButtonDowntime(const char* name, uint32_t state, void* pData)
{
	SElExceptionPtr	pexception = NULL;
	STesterPtr		me = (STesterPtr)pData;

	if( state==1 && me->eventAPI)
		EXCCHECK( me->eventAPI->PulseEvent(me->eventAPI, EVNT_TESTER_BUTTON_PRESSED_DOWNTIME, NULL));

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"CallbackFncButtonStart"
static SElExceptionPtr CallbackFncButtonStart(const char* name, uint32_t state, void* pData)
{
	SElExceptionPtr	pexception = NULL;
	STesterPtr		me = (STesterPtr)pData;

	if(state==1)
		EXCCHECK( me->SetSensor(me, "INDICATOR_START", 0));

Error:
	EXCRETHROW(pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__	"CallbackFncButtonTotalStop"
static SElExceptionPtr CallbackFncButtonTotalStop(const char* name, uint32_t state, void* pData)
{
	SElExceptionPtr	pexception = NULL;
	STesterPtr		me = (STesterPtr)pData;

	EXCCHECK( me->SetSensor(me, "INDICATOR_START", state));	

Error:
	EXCRETHROW(pexception);
}