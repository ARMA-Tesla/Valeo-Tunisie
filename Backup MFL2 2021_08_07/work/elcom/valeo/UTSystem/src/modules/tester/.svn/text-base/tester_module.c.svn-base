#include <modules/module.h>
#include <eventfactory/EventFactory.h>
#include <utility.h>
#include <guid.h>
#include <log/log.h>
#include "tester.h"

static SElEventFactoryPtr	gs_EventFactory = NULL;
static STesterPtr 	    	gs_pTester = NULL;

static SElExceptionPtr RegisterEventFunction(void);

int __stdcall DllMain (HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
	switch (fdwReason)
		{
		case DLL_PROCESS_ATTACH:
#if (!defined(_CVI_)&&defined(_DEBUG))
			//_CrtSetBreakAlloc(78);
#endif
			if (InitCVIRTE (hinstDLL, 0, 0) == 0)
				return 0;	  /* out of memory */
			break;
		case DLL_PROCESS_DETACH:
			CloseCVIRTE ();
#if !defined(_CVI_) && defined(_DEBUG) && defined(DUMP_MEMORY_LEAKS)
			_CrtDumpMemoryLeaks();
#endif
			break;
		}
	
	return 1;
}


#undef __FUNC__
#define __FUNC__ "GetModuleAttribute"
SElExceptionPtr	_FUNCC GetModuleAttribute( uint32_t  attrID, uint32_t size, void* value)
{
	switch ( attrID )
	{
		case MODULE_ATTR_VERSION_STRING:
			strncpy((char*)value, "1.0", size);
			break;
		case MODULE_ATTR_MODULE_ID:
			strncpy((char*)value, MODULE_TESTER, size);
			break;
		case MODULE_ATTR_MODULE_NAME:
			strncpy((char*)value, "Tester Module", size);
			break;
		case MODULE_ATTR_MODULE_DESCRIPTION:
			strncpy((char*)value, "Module for tester control", size);
			break;
		case MODULE_ATTR_REQUIRED_MODULES:	
			strncpy((char*)value, MODULE_LOG";"MODULE_SENSORS, size);
			break;
		case MODULE_ATTR_BUILD_DATETIME:
			strncpy((char*)value, __DATE__" "__TIME__, size);
			break;
	}
	return NULL;
}

#undef __FUNC__
#define __FUNC__ "{Tester}::LoadElcomModule"
SElExceptionPtr	_FUNCC LoadElcomModule(
	const char* configuration,
	void** pInstance,
	SPluginArgsPtr	pParam
)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			module_dir[512];
	char			file_name[1024];

	EXCCHECK( pParam->GetArg( pParam,
							  "WindowHandle",
							  sizeof(hWnd),
							  &hWnd));

	EXCCHECK( tester_new( &gs_pTester));
	EXCCHECK( pParam->SetArg( pParam, "TesterModule", ARG_PTR, (void*) gs_pTester));

	EXCCHECK( pParam->GetArg( pParam,
							 MODULE_LOG,
							 sizeof(void*),
							 &(gs_pTester->LogApi)));

	gs_pTester->LogChannel = E_LOG_CHANNEL_TESTER;

	EXCCHECKCVI( GetModuleDir (__CVIUserHInst, module_dir));
	sprintf(file_name, "%s\\tester.xml", module_dir);
	EXCCHECK( gs_pTester->Initialize(gs_pTester, file_name));

	EXCCHECK( pParam->GetArg( pParam,
							 "EventFactory",
							 sizeof(SElEventFactoryPtr),
							 &gs_EventFactory));
	
	EXCCHECK( RegisterEventFunction());

Error:                       
	*pInstance = gs_pTester;
	EXCRETHROW( pexception);
}


#undef __FUNC__
#define __FUNC__ "{Tester}::InitializeElcomModule"
SElExceptionPtr	_FUNCC InitializeElcomModule( void* pInstance, const char* configuration, SPluginArgsPtr pParam)
{
	SElExceptionPtr	pexception = NULL; 
	
	EXCCHECK( pParam->GetArg( pParam,
							  "SensorModule",
							  sizeof(gs_pTester->sensorAPI),
							  &(gs_pTester->sensorAPI)));

	EXCCHECK( pParam->GetArg( pParam,
							 "EventFactory",
							 sizeof(gs_pTester->eventAPI),
							 &(gs_pTester->eventAPI)));

	EXCCHECK( gs_pTester->RegisterSensorCallbacks( gs_pTester));

	/* reset outputs ports */
	EXCCHECK( gs_pTester->SetSensor(gs_pTester, "JIG_OVERLOAD_RESET_01", 1));
	EXCCHECK( gs_pTester->SetSensor(gs_pTester, "JIG_OVERLOAD_RESET_02", 1));
	EXCCHECK( gs_pTester->SetSensor(gs_pTester, "JIG_OVERLOAD_RESET_03", 1));
	Sleep(100);
	EXCCHECK( gs_pTester->SetSensor(gs_pTester, "JIG_OVERLOAD_RESET_01", 0));
	EXCCHECK( gs_pTester->SetSensor(gs_pTester, "JIG_OVERLOAD_RESET_02", 0));
	EXCCHECK( gs_pTester->SetSensor(gs_pTester, "JIG_OVERLOAD_RESET_03", 0));

Error:
	EXCRETHROW( pexception);   
}

#undef __FUNC__
#define __FUNC__ "{Tester}::UnloadElcomModule"
SElExceptionPtr	_FUNCC UnloadElcomModule( void* pInstance)
{
	SElExceptionPtr    pexception = NULL;        
	
	EXCCHECK( tester_delete(&gs_pTester));    
	
Error:
	EXCRETHROW( pexception);   
}

static int32_t		gs_key_count = 0;
/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "FunctionCallback"
SElExceptionPtr FunctionCallback( const char* eventName, void* pData)
{
	SElExceptionPtr	pexception = NULL;

	if(pData)
	{
		const char* key = ((SElEventDataPtr)pData)->GetStringPtr(pData);   

		if( 0==strcmp( key, "F1_KEY"))
		{
			gs_key_count++;

			if( gs_key_count>=2)
			{
				EXCCHECK( gs_pTester->SetSensor(gs_pTester, "MASK_REAR", 0));
				EXCCHECK( gs_pTester->SetSensor(gs_pTester, "MASK_FRONT", 1));
				gs_key_count = 0;
			}
		}
		else
		{
			gs_key_count = 0;
		}
	}

Error:                       
	EXCRETHROW( pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "RegisterEventFunction"
static SElExceptionPtr RegisterEventFunction(void)
{
   SElExceptionPtr   pexception = NULL;
   
   if ( gs_EventFactory )
   {
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
		                                   "EVNT_GUI_KEY_PRESSED",
		                                   FunctionCallback));	  
   }
   
Error:
   EXCRETHROW(pexception);
}   /* RegisterEventFunction */