#if !defined(__TEST_PANEL_H__)
#define __TEST_PANEL_H__

#include <test/eltest.h>
#include "test.h"
#include <eltypes.h>
#include <elerror.h>
#include <language/language.h>

TEST_API SElExceptionPtr _FUNCC IniTestPanel(const char* picture, bool_t reset);
TEST_API SElExceptionPtr _FUNCC CloseTestPanel(void); 
TEST_API SElExceptionPtr _FUNCC SetTestPanelDescription(int32_t control, const char* description);
TEST_API SElExceptionPtr _FUNCC SetTestPanelMode(int32_t mode);

TEST_API SElExceptionPtr _FUNCC GetTestFunction(int32_t index, STestListItemPtr* pTest, int32_t* count);
TEST_API SElExceptionPtr _FUNCC GetTestSeqFunction(STestSeqPtr* pTestSeq);

#define COLOR_GRID  0x00347B

#define TEST_HELP(help) \
	EXCCHECKCVI( SetCtrlVal(gs_TestPanel, PANEL_HELP2, help))

#define DISPLAY_TEST( msg ) \
	do { \
		int	rows = 1; char _buffer[256] = "Test: "; \
		strcat(_buffer, msg); \
		SetCtrlVal( gs_TestPanel, PANEL_TEXT3, _buffer); \
		InsertTableRows (gs_TestPanel, PANEL_TABLE, -1, 1, VAL_CELL_STRING); \
		GetNumTableRows (gs_TestPanel, PANEL_TABLE, &rows);\
		SetTableRowAttribute (gs_TestPanel, PANEL_TABLE, rows, ATTR_SIZE_MODE, VAL_USE_EXPLICIT_SIZE); \
		SetTableRowAttribute (gs_TestPanel, PANEL_TABLE, rows, ATTR_ROW_HEIGHT, 25); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(1, rows), ATTR_HORIZONTAL_GRID_COLOR, COLOR_GRID); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(1, rows), ATTR_VERTICAL_GRID_COLOR, COLOR_GRID); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(1, rows), ATTR_CELL_JUSTIFY, VAL_CENTER_LEFT_JUSTIFIED); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(1, rows), ATTR_CTRL_VAL, msg); \
		SetActiveTableCell (gs_TestPanel, PANEL_TABLE, MakePoint(1, rows)); \
	} while (0)

#define DISPLAY_TEST_RESULT( duration ) \
	do { \
		int	rows = 1, bid; \
		GetNumTableRows (gs_TestPanel, PANEL_TABLE, &rows);\
		GetCtrlBitmap (gs_TestPanel, PANEL_TABLE_STATE, (pexception==NULL)? 0:1, &bid); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(2, rows), ATTR_HORIZONTAL_GRID_COLOR, COLOR_GRID); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(2, rows), ATTR_VERTICAL_GRID_COLOR, COLOR_GRID); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(2, rows), ATTR_CELL_TYPE, VAL_CELL_NUMERIC); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(2, rows), ATTR_CELL_JUSTIFY, VAL_CENTER_CENTER_JUSTIFIED); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(2, rows), ATTR_CTRL_VAL, duration); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(3, rows), ATTR_HORIZONTAL_GRID_COLOR, COLOR_GRID); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(3, rows), ATTR_VERTICAL_GRID_COLOR, COLOR_GRID); \
	    SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(3, rows), ATTR_CELL_TYPE, VAL_CELL_PICTURE); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(3, rows), ATTR_FIT_MODE, VAL_PICT_CENTER); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(3, rows), ATTR_CELL_JUSTIFY, VAL_CENTER_CENTER_JUSTIFIED); \
		SetTableCellAttribute (gs_TestPanel, PANEL_TABLE, MakePoint(3, rows), ATTR_CTRL_VAL, bid); \
		DiscardBitmap(bid); \
		if(pexception!=NULL) SetCtrlIndex( gs_TestPanel, PANEL_ACTION, 0); \
	} while (0)

#define DISPLAY_TESTSEQ_RESULT( ) \
	do { \
		if(pexception!=NULL) SetCtrlIndex( gs_TestPanel, PANEL_ACTION, 0); \
	} while (0)

#define DISPLAY_OBJECT( shift, x, y, r, picture_id) \
	do { \
		int bid; \
		GetCtrlBitmap (gs_TestPanel, PANEL_CIRCLERING, ((picture_id)+(shift)), &bid); \
		CanvasDrawBitmap (gs_TestPanel, PANEL_CANVAS, bid, VAL_ENTIRE_OBJECT, MakeRect((y)-(r),(x)-(r),2*(r),2*(r))); \
		DiscardBitmap(bid); \
	} while (0) 

#define DISPLAY_TEXT(x, y, size, text, color_id) /* color_id: 0-yellow, 1-green, 2-red */ \
	do{ \
		SetCtrlAttribute (gs_TestPanel, PANEL_CANVAS, ATTR_PEN_COLOR, ((color_id)==0)? VAL_YELLOW:(((color_id)==1)? VAL_GREEN:(((color_id)==2)? VAL_RED:VAL_TRANSPARENT))); \
		SetCtrlAttribute (gs_TestPanel, PANEL_CANVAS, ATTR_PEN_FILL_COLOR, VAL_TRANSPARENT); \
		CreateMetaFont ("MyMetaFont", "Trebuchet MS", (size), 1, 0, 0, 0); \
		CanvasDrawTextAtPoint (gs_TestPanel, PANEL_CANVAS, (text), "MyMetaFont", MakePoint((y), (x)), VAL_CENTER); \
	}while(0)

#define DISPLAY_CLEAR_ALL() \
	do{ \
		int bid, cw, ch, bw, bh; \
		EXCCHECKCVI( CanvasClear (gs_TestPanel, PANEL_CANVAS, VAL_ENTIRE_OBJECT)); \
		EXCCHECKCVI( GetCtrlBitmap (gs_TestPanel, PANEL_PANELPICTURE, -1, &bid)); \
		EXCCHECKCVI( GetBitmapData(bid, NULL, NULL, &bw, &bh, NULL, NULL, NULL)); \
		EXCCHECKCVI( GetCtrlAttribute( gs_TestPanel, PANEL_CANVAS, ATTR_HEIGHT, &ch)); \
		EXCCHECKCVI( GetCtrlAttribute( gs_TestPanel, PANEL_CANVAS, ATTR_WIDTH, &cw)); \
		EXCCHECKCVI( CanvasDrawBitmap (gs_TestPanel, PANEL_CANVAS, bid, VAL_ENTIRE_OBJECT, MakeRect(ch/2 - bh/2, cw/2 - bw/2,VAL_KEEP_SAME_SIZE,VAL_KEEP_SAME_SIZE))); \
		DiscardBitmap(bid); \
	} while (0) 

#define DISPLAY_CIRCLE( x, y, r, picture_id) \
	DISPLAY_OBJECT( 0, x, y, r, picture_id)

#define DISPLAY_ARROW_RIGHT( x, y, r, picture_id) \
	DISPLAY_OBJECT( 3, x, y, r, picture_id)

#define DISPLAY_ARROW_LEFT( x, y, r, picture_id) \
	DISPLAY_OBJECT( 6, x, y, r, picture_id)

#define DISPLAY_ARROW_UP( x, y, r, picture_id) \
	DISPLAY_OBJECT( 9, x, y, r, picture_id)

#define DISPLAY_ARROW_DOWN( x, y, r, picture_id) \
	DISPLAY_OBJECT( 12, x, y, r, picture_id)

#define DISPLAY_TESTSEQUENCE_DURATION(time) \
	do { \
		char buffer[256]; \
		sprintf(buffer, "Time: %.1f s", time); \
		SetCtrlVal( gs_TestPanel, PANEL_TEXT1, buffer); \
	} while (0)

#define PANEL_INI() \
	do{ \
	int bid, cw, ch, bw, bh, barcode_size=128; \
	char barcode[128]="", barcode_text[256]=""; \
	TESTSEQUENCE_BARCODE( barcode, barcode_size); \
	sprintf(barcode_text, "S/N: %s", barcode); \
	EXCCHECKCVI( SetCtrlVal( gs_TestPanel, PANEL_RESULT_MSG, _("Test Result"))); \
	EXCCHECKCVI( SetCtrlVal( gs_TestPanel, PANEL_TEXT1, _("Time:"))); \
	EXCCHECKCVI( SetCtrlVal( gs_TestPanel, PANEL_TEXT2, barcode_text)); \
	EXCCHECKCVI( SetCtrlVal( gs_TestPanel, PANEL_TEXT3, _("Test:"))); \
	EXCCHECKCVI( SetCtrlVal( gs_TestPanel, PANEL_HELP2, _(""))); \
	EXCCHECKCVI( SetCtrlIndex( gs_TestPanel, PANEL_ACTION, 2)); \
	EXCCHECKCVI( GetCtrlBitmap (gs_TestPanel, PANEL_PANELPICTURE, -1, &bid)); \
	EXCCHECKCVI( CanvasClear (gs_TestPanel, PANEL_CANVAS, VAL_ENTIRE_OBJECT)); \
	EXCCHECKCVI( SetCtrlAttribute (gs_TestPanel, PANEL_CANVAS, ATTR_PEN_FILL_COLOR, VAL_TRANSPARENT)); \
	EXCCHECKCVI( GetCtrlAttribute( gs_TestPanel, PANEL_CANVAS, ATTR_HEIGHT, &ch)); \
	EXCCHECKCVI( GetCtrlAttribute( gs_TestPanel, PANEL_CANVAS, ATTR_WIDTH, &cw)); \
	EXCCHECKCVI( GetBitmapData(bid, NULL, NULL, &bw, &bh, NULL, NULL, NULL)); \
	EXCCHECKCVI( CanvasDrawBitmap (gs_TestPanel, PANEL_CANVAS, bid, VAL_ENTIRE_OBJECT, MakeRect(ch/2 - bh/2, cw/2 - bw/2,VAL_KEEP_SAME_SIZE,VAL_KEEP_SAME_SIZE))); \
	EXCCHECKCVI( DeleteTableRows (gs_TestPanel, PANEL_TABLE, 1, -1)); \
	EXCCHECKCVI( SetCtrlAttribute(gs_TestPanel, PANEL_FORWARD, ATTR_DIMMED, FALSE)); \
	EXCCHECKCVI( SetCtrlAttribute(gs_TestPanel, PANEL_BACKWARD, ATTR_DIMMED, FALSE)); \
	EXCCHECKCVI( SetCtrlAttribute(gs_TestPanel, PANEL_REPEAT, ATTR_DIMMED, FALSE)); \
	EXCCHECKCVI( SetCtrlAttribute(gs_TestPanel, PANEL_STOP, ATTR_DIMMED, FALSE)); \
	EXCCHECKCVI( DiscardBitmap(bid)); \
	} while(0)

#define PANEL_CLEAN() \
	do { \
		int index; \
		EXCCHECKCVI( GetCtrlIndex( gs_TestPanel, PANEL_ACTION, &index)); \
		if(index==2) SetCtrlIndex( gs_TestPanel, PANEL_ACTION, 1); \
		EXCCHECKCVI( SetCtrlAttribute(gs_TestPanel, PANEL_FORWARD, ATTR_DIMMED, TRUE)); \
		EXCCHECKCVI( SetCtrlAttribute(gs_TestPanel, PANEL_BACKWARD, ATTR_DIMMED, TRUE)); \
		EXCCHECKCVI( SetCtrlAttribute(gs_TestPanel, PANEL_REPEAT, ATTR_DIMMED, TRUE)); \
		EXCCHECKCVI( SetCtrlAttribute(gs_TestPanel, PANEL_STOP, ATTR_DIMMED, TRUE)); \
	} while (0)

#endif
