#include <jig/class/jig_class.h>
#include <labels/tester_labels.h>
#include <test/test.h>
#include <multithread/multithread.h>
#include <language/language.h>
#include <utility.h>
#include <stdio.h>
#include <dbs/dbs.h>
#include <box/box.h>
#include <tester/tester.h>
#include <printer/class/printers.h>
#include "automat.h"
#include "automat_fnc.h"
#include "automat_plugin.h" 

const char* HISTORY = \
"[2008-05-27] rT 1.10\n"
" * ProcessEventGuiProductSelected edited. No master part after pause is needed.\n"
"[2007-12-13] rT 1.10\n"
" * Function LoadTestSequence was edited. Reason was a application freezing.\n"
"[2007-12-15] rT 1.20\n"
" * Retest panel algorithm edited\n";

enum {
	EVNT_STOP_THREAD = 0,
	EVNT_GUI_PRODUCTION,
	EVNT_GUI_QUALITY_RELEASE,
	EVNT_GUI_QUALITY_RETEST,
	EVNT_GUI_QUALITY_MASTER,
	EVNT_GUI_EXPERTISE_STEP_MODE,
	EVNT_GUI_EXPERTISE_GO_MODE,
	EVNT_GUI_EXPERTISE_SEQUENCE_CREATED,
	EVNT_GUI_EXPERTISE_RNR,
	EVNT_GUI_PRODUCT_SELECTED,
	EVNT_TEST_SEQUENCE_RUN,
	EVNT_EXPERTISE_STEP_MODE_NEXT,
	EVNT_EXPERTISE_STEP_MODE_REPEAT,
	EVNT_EXPERTISE_STEP_MODE_BACK,
	EVNT_EXPERTISE_STEP_MODE_STOP,
	EVNT_GUI_KEY_ESC_PRESSED,
	EVNT_RESET_PRODUCT,
	EVNT_JIG_ITEM_INSERTED_,
	/* event count */
	EVENT_HANDLE_NB
};

#define NB_OF_PANEL		1    
int						gs_panel[NB_OF_PANEL + 1];
static HANDLE			gs_EventHandle[EVENT_HANDLE_NB];
SElEventFactoryPtr		gs_EventFactory = NULL;  
static SObjListPtr 		gs_Modules = NULL; 
static SJigPtr			gs_pJig = NULL;    
static SLabelListPtr	gs_pLabels = NULL;
static SDBSPtr			gs_pDbs = NULL;
static SBoxPtr			gs_pBox = NULL;
static STesterPtr		gs_pTester = NULL;
static SPrintersPtr		gs_pPrinters = NULL;
static SAutomat			gs_Automat;
static HANDLE			gs_hThread = NULL;
SLanguagePtr			gs_pLanguage = NULL; 

#define PANEL_MSG(control, msg) \
	do{ \
		if(gs_Automat.pTestSeq) \
			EXCCHECK( gs_Automat.pTestSeq->SetPanelDescription(gs_Automat.pTestSeq, control, msg)); \
	}while(0)

#define PANEL_MODE(mode) \
	do{ \
		if(gs_Automat.pTestSeq) \
			EXCCHECK( gs_Automat.pTestSeq->SetPanelMode(gs_Automat.pTestSeq, E_TSPM_##mode)); \
	}while(0)

#define CHECK_ERR( is_Error) \
	if(is_Error!=0) goto Error; \
	else

#define INSERT_EMPTY_BOX() \
	EXCCHECK( gs_pBox->SetPanelsInBox(gs_pBox, gs_pBox->_PanelsInBox))

#define UNLOCK_DELAY		500
#define TIMEOUT				2000

static SElExceptionPtr JigPanelBarcode(char* barcode, int32_t* error);
static SElExceptionPtr JigPanelInsert(void);
static SElExceptionPtr JigPanelRelease(bool_t fault);

static void CVICALLBACK PostDeferredDisplayPanel (void *callbackData){ DisplayPanel(gs_panel[AUTOMAT]); }
static void CVICALLBACK PostDeferredHidePanel (void *callbackData){ HidePanel(gs_panel[AUTOMAT]); }

CRITICAL_SECTION   _Lock;
/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "fncLock"
static SElExceptionPtr fncLock(void)
{
   EnterCriticalSection( &_Lock);
   return NULL;
} 

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "fncUnlock"
static SElExceptionPtr fncUnlock(void)
{
   LeaveCriticalSection( &_Lock);
   return NULL;
} 

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiResetProduct"
static SElExceptionPtr ProcessEventGuiResetProduct(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			test_form_xml[MAX_PATHNAME_LEN]; 
	int32_t			is_Error = 0;

	/* reload only if production is active */
	if( gs_Automat.Mode==AUTOMAT_PRODUCTION)
	{
		EXCCHECKCVI( GetProjectDir(test_form_xml));
		strcat(test_form_xml, PATH_TEST_FILE_FORM_XML); 

		EXCCHECK( LoadTestSequence(test_form_xml, gs_Automat.pTestSeq, gs_Modules, TRUE, &is_Error)); 
		CHECK_ERR( is_Error);

		gs_Automat.TestSeqMode = TESTSEQ_PRODUCTION;
	}

Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiProductSelected"
static SElExceptionPtr ProcessEventGuiProductSelected(bool_t set_panel, bool_t set_box, bool_t set_master)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			test_form_xml[MAX_PATHNAME_LEN]; 
	int32_t			is_Error = 0;
	SElEventDataPtr pdata = NULL;

	if(gs_EventFactory && set_panel)
	{
		/* set panel to default */
		EXCCHECK( eleventdata_new(&pdata)); 
		EXCCHECK( pdata->SetStringPtr(pdata, "panel;2"));
		EXCCHECK( gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_GUI_PANEL", pdata));
	}

	/* set mode */
	gs_Automat.Mode = AUTOMAT_PRODUCTION;

	EXCCHECKCVI( GetProjectDir(test_form_xml));
	strcat(test_form_xml, PATH_TEST_FILE_FORM_XML);

	EXCCHECK( LoadTestSequence(test_form_xml, gs_Automat.pTestSeq, gs_Modules, TRUE, &is_Error)); 
	CHECK_ERR( is_Error);

	gs_Automat.TestSeqMode = TESTSEQ_PRODUCTION;

	if(gs_Automat.box_active && set_box)
		gs_Automat.box = TRUE;

	if(gs_Automat.master_active && set_master)
		gs_Automat.masterpart = TRUE;

	if(gs_Automat.shift_id==0)
	{
		PANEL_MSG( PANEL_HELP1, _("Select Shift"));  
		PANEL_MSG( PANEL_HELP2, "");
	}
	else
	{
		PANEL_MSG( PANEL_HELP1, _("Production"));

		if( gs_Automat.box)
		{
			PANEL_MSG( PANEL_HELP2, _("Insert Empty Box"));	
			INSERT_EMPTY_BOX();
		}
		else if( gs_Automat.masterpart)
			PANEL_MSG( PANEL_HELP2, _("Insert Master Panel"));
		else
			PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
	}

	PANEL_MODE( DEFAULT_MODE);

Error:
	eleventdata_delete(&pdata);
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiProduction"
static SElExceptionPtr ProcessEventGuiProduction(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			test_form_xml[MAX_PATHNAME_LEN];
	int32_t			is_Error = 0;

	/* set mode */
	gs_Automat.Mode = AUTOMAT_PRODUCTION;

	/* load testsequence for production */
	if(gs_Automat.TestSeqMode!=TESTSEQ_PRODUCTION)
	{
		EXCCHECKCVI( GetProjectDir(test_form_xml));
		strcat(test_form_xml, PATH_TEST_FILE_FORM_XML); 
	
		EXCCHECK( LoadTestSequence(test_form_xml, gs_Automat.pTestSeq, gs_Modules, TRUE, &is_Error));
		CHECK_ERR( is_Error);
		
		gs_Automat.TestSeqMode = TESTSEQ_PRODUCTION;
	}

	if(gs_Automat.shift_id==0)
	{
		PANEL_MSG( PANEL_HELP1, _("Select Shift"));  
		PANEL_MSG( PANEL_HELP2, "");
	}
	else
	{
		PANEL_MSG( PANEL_HELP1, _("Production"));

		if(gs_Automat.box)
		{
			PANEL_MSG( PANEL_HELP2, _("Insert Empty Box"));
			INSERT_EMPTY_BOX();
		}
		else if(gs_Automat.masterpart)
			PANEL_MSG( PANEL_HELP2, _("Insert Master Panel"));
		else
			PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
	}

	PANEL_MODE( DEFAULT_MODE);

Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiQualityRelease"
static SElExceptionPtr ProcessEventGuiQualityRelease(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;

	EXCCHECK( JigPanelRelease(FALSE));

Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiQualityRetest"
static SElExceptionPtr ProcessEventGuiQualityRetest(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			test_form_xml[MAX_PATHNAME_LEN];
	int32_t			is_Error = 0;

	/* set mode */
	gs_Automat.Mode = AUTOMAT_QUALITY_RETEST;
	
	/* load testsequence for production */
	if(gs_Automat.TestSeqMode!=TESTSEQ_PRODUCTION)
	{
		EXCCHECKCVI( GetProjectDir(test_form_xml));
		strcat(test_form_xml, PATH_TEST_FILE_FORM_XML);
		
		EXCCHECK( LoadTestSequence(test_form_xml, gs_Automat.pTestSeq, gs_Modules, TRUE, &is_Error));
		CHECK_ERR( is_Error);

		gs_Automat.TestSeqMode = TESTSEQ_PRODUCTION;
	}
	
	PANEL_MSG( PANEL_HELP1, _("Quality Retest"));
	PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
	PANEL_MODE( DEFAULT_MODE);

Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiQualityMaster"
static SElExceptionPtr ProcessEventGuiQualityMaster(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			test_form_xml[MAX_PATHNAME_LEN]; 
	int32_t			is_Error = 0;

	/* set mode */
	gs_Automat.Mode = AUTOMAT_QUALITY_MASTER;
	
	/* load testsequence for production */
	if(gs_Automat.TestSeqMode!=TESTSEQ_PRODUCTION)
	{   
		EXCCHECKCVI( GetProjectDir(test_form_xml));
		strcat(test_form_xml, PATH_TEST_FILE_FORM_XML);
		
		EXCCHECK( LoadTestSequence(test_form_xml, gs_Automat.pTestSeq, gs_Modules, TRUE, &is_Error));
		CHECK_ERR( is_Error);
		
		gs_Automat.TestSeqMode = TESTSEQ_PRODUCTION;
	}
	
	PANEL_MSG( PANEL_HELP1, _("Quality Master"));
	PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
	PANEL_MODE( DEFAULT_MODE);
				
Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiExpertiseStepMode"
static SElExceptionPtr ProcessEventGuiExpertiseStepMode(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;

	/* set mode */
	gs_Automat.Mode = AUTOMAT_EXPERTISE_STEP_MODE;
	
	if(gs_Automat.TestSeqMode==TESTSEQ_PRODUCTION)
	{
		PANEL_MSG( PANEL_HELP1, _("Expertise, Step Mode")); 
	}
	else if(gs_Automat.TestSeqMode==TESTSEQ_EXPERTISE)
	{
		PANEL_MSG( PANEL_HELP1, _("Expertise Sequence, Step Mode"));
	}
	PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
	PANEL_MODE(STEP_BY_STEP_MODE);
				
Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiExpertiseGoMode"
static SElExceptionPtr ProcessEventGuiExpertiseGoMode(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;

	/* set mode */
	gs_Automat.Mode = AUTOMAT_EXPERTISE_GO_MODE;
	
	if(gs_Automat.TestSeqMode==TESTSEQ_PRODUCTION)
	{
		PANEL_MSG( PANEL_HELP1, _("Expertise, Go Mode"));
	}
	else if(gs_Automat.TestSeqMode==TESTSEQ_EXPERTISE)
	{
		PANEL_MSG( PANEL_HELP1, _("Expertise Sequence, Go Mode"));
	}
	PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
	PANEL_MODE( DEFAULT_MODE);
				
Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiExpertiseSequenceCreated"
static SElExceptionPtr ProcessEventGuiExpertiseSequenceCreated(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			testexp_form_xml[MAX_PATHNAME_LEN]; 
	int32_t			is_Error = 0;

	/* set mode */
	gs_Automat.Mode = AUTOMAT_EXPERTISE_SEQUENCE;
	
	EXCCHECKCVI( GetProjectDir(testexp_form_xml));
	strcat(testexp_form_xml, PATH_TESTEXP_FILE_FORM_XML); 
	
	EXCCHECK( LoadTestSequence(testexp_form_xml, gs_Automat.pTestSeq, gs_Modules, TRUE, &is_Error)); 
	CHECK_ERR( is_Error);
	
	gs_Automat.TestSeqMode = TESTSEQ_EXPERTISE;

	PANEL_MSG( PANEL_HELP1, _("Expertise Sequence"));  
	PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
	PANEL_MODE( DEFAULT_MODE);
				
Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiExpertiseRnR"
static SElExceptionPtr ProcessEventGuiExpertiseRnR(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			test_form_xml[MAX_PATHNAME_LEN];
	int32_t			is_Error = 0;

	/* set mode */
	gs_Automat.Mode = AUTOMAT_EXPERTISE_RNR_STUDY;
	
	/* load testsequence for production */
	if(gs_Automat.TestSeqMode!=TESTSEQ_PRODUCTION)
	{   
		EXCCHECKCVI( GetProjectDir(test_form_xml));
		strcat(test_form_xml, PATH_TEST_FILE_FORM_XML); 
	
		EXCCHECK( LoadTestSequence(test_form_xml, gs_Automat.pTestSeq, gs_Modules, TRUE, &is_Error));
		CHECK_ERR( is_Error);
	
		gs_Automat.TestSeqMode = TESTSEQ_PRODUCTION;
	}

	PANEL_MSG( PANEL_HELP1, _("Expertise RnR Study"));  
	PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
	PANEL_MODE( DEFAULT_MODE);
				
Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventTestSequenceRun"
static SElExceptionPtr ProcessEventTestSequenceRun(const char* barcode)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			form_xml[MAX_PATHNAME_LEN];        

	if(gs_Automat.TestSeqMode==TESTSEQ_PRODUCTION)
	{
		EXCCHECKCVI( GetProjectDir(form_xml));
		strcat(form_xml, PATH_TEST_FILE_FORM_XML); 
		
		EXCCHECK( RunTestSequence(form_xml, barcode, &gs_Automat, gs_EventFactory)); 
	}
	else if(gs_Automat.TestSeqMode==TESTSEQ_EXPERTISE)
	{
		EXCCHECKCVI( GetProjectDir(form_xml));
		strcat(form_xml, PATH_TESTEXP_FILE_FORM_XML); 
	
		EXCCHECK( RunTestSequence(form_xml, barcode, &gs_Automat, gs_EventFactory)); 
	}
	else if(gs_Automat.TestSeqMode==TESTSEQ_MASTERPART)
	{
		EXCCHECKCVI( GetProjectDir(form_xml));
		strcat(form_xml, PATH_TESTMASTER_FILE_FORM_XML); 
	
		EXCCHECK( RunTestSequence(form_xml, barcode, &gs_Automat, gs_EventFactory)); 
	}
				
Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventGuiExpertiseStepSequence"
static SElExceptionPtr ProcessEventGuiExpertiseStepSequence(int mode)
{
	SElExceptionPtr		pexception = NULL;
	int32_t				error = 0;
	bool_t				is_active = FALSE;
	bool_t				last_step = FALSE;

	pexception = StepTestSequence( gs_Automat.TestParam.TicketFilePath, 
									&gs_Automat, 
									gs_EventFactory, 
									mode, 
									&is_active,
									&last_step);

	EXCDISPLAY( pexception);

	if( (mode==STEP_SEQUENCE_CANCEL && is_active)
		|| last_step)
	{
		EXCCHECK( JigPanelRelease(FALSE));	

		if( (last_step || mode==STEP_SEQUENCE_CANCEL)
			&& gs_EventFactory)
		{
			EXCCHECK( gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_GUI_PANEL_UNLOCK", NULL));
		}
	}
				
Error:
	EXCRETHROW( pexception);  
}

#define BARCODE_BUFFER_SIZE		256
/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventJigItemInserted"
static SElExceptionPtr ProcessEventJigItemInserted(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	char			barcode[BARCODE_BUFFER_SIZE+1] = "none";
	bool_t			failed = FALSE;
	
	if( !gs_Automat.disabled)
	{
		if(gs_EventFactory)
			EXCCHECK( gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_GUI_PANEL_LOCK", NULL));

		if( gs_Automat.Mode==AUTOMAT_PRODUCTION && gs_Automat.shift_id==0)
		{
			PANEL_MSG( PANEL_HELP1, _("Select Shift"));  
			PANEL_MSG( PANEL_HELP2, "");
			CHECK_ERR( -1);
		}
		else if( gs_Automat.Mode==AUTOMAT_PRODUCTION && gs_Automat.box)
		{ 
			PANEL_MSG( PANEL_HELP2, _("Insert Empty Box"));
			INSERT_EMPTY_BOX();
			CHECK_ERR( -1);
		}

		EXCCHECK( JigPanelBarcode(barcode, &error));
		CHECK_ERR( error);

		EXCCHECK( JigPanelInsert());
		
		/* run test sequence */
		pexception = ProcessEventTestSequenceRun(barcode);

		if( (gs_Automat.Mode==AUTOMAT_PRODUCTION || gs_Automat.Mode==AUTOMAT_QUALITY_RETEST) && pexception==NULL)
		{
			EXCCHECK( gs_pJig->jig_ColdMarking(gs_pJig, "", TIMEOUT));

			if( gs_Automat.box_active)
				EXCCHECK( gs_pBox->AddPanelToBox(gs_pBox));
		}
		else if( gs_Automat.Mode==AUTOMAT_MASTERPART && pexception==NULL)
		{
			char test_form_xml[MAX_PATHNAME_LEN];

			/* reload production testsequence */
			gs_Automat.Mode = AUTOMAT_PRODUCTION;

			EXCCHECKCVI( GetProjectDir(test_form_xml));
			strcat(test_form_xml, PATH_TEST_FILE_FORM_XML); 

			/* load testsequence */
			EXCCHECK( LoadTestSequence(test_form_xml, gs_Automat.pTestSeq, gs_Modules, FALSE, &error)); 
			CHECK_ERR( error);

			gs_Automat.TestSeqMode = TESTSEQ_PRODUCTION;
			gs_Automat.masterpart = FALSE;
		}
		else if(pexception)
		{
			EXCDBGSTR( pexception);
			failed = TRUE;
		}

		if( gs_Automat.Mode!=AUTOMAT_EXPERTISE_STEP_MODE)
		{
			EXCCHECK( JigPanelRelease(failed));	
		}

		if( gs_Automat.Mode==AUTOMAT_MASTERPART)
		{
			gs_Automat.Mode = AUTOMAT_PRODUCTION;
		}
	}
				
Error:
	if(gs_Automat.Mode!=AUTOMAT_EXPERTISE_STEP_MODE && gs_EventFactory) 
		gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_GUI_PANEL_UNLOCK", NULL);
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::ProcessEventJigItemReleased"
static SElExceptionPtr ProcessEventJigItemReleased(void)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;

	if( gs_Automat.Mode==AUTOMAT_PRODUCTION && gs_Automat.shift_id==0)
	{
		PANEL_MSG( PANEL_HELP1, _("Select Shift"));  
		PANEL_MSG( PANEL_HELP2, "");
	}
	else if( gs_Automat.Mode==AUTOMAT_PRODUCTION && gs_Automat.box)
	{
		PANEL_MSG( PANEL_HELP2, _("Insert Empty Box"));
		INSERT_EMPTY_BOX();
	}
	else if( gs_Automat.Mode==AUTOMAT_PRODUCTION && gs_Automat.masterpart)
		PANEL_MSG( PANEL_HELP2, _("Insert Master Panel"));
	else
		PANEL_MSG( PANEL_HELP2, _("Insert Panel"));

Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "Thread_Automat"
static DWORD WINAPI Thread_Automat(LPVOID param)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	DWORD 			result;
	bool_t			b_loop_stop = FALSE;
	char			barcode[512];
	bool_t			is_locked = FALSE;
	
	do
	{
		result = WaitForMultipleObjects(EVENT_HANDLE_NB, gs_EventHandle, FALSE, 10000);
		
		EXCCHECK( fncLock());
		is_locked = TRUE;
		
		switch(result)
		{	
			case WAIT_OBJECT_0 + EVNT_GUI_PRODUCT_SELECTED:
				EXCDISPLAY( ProcessEventGuiProductSelected(TRUE, TRUE, TRUE)); 
				break;
			case WAIT_OBJECT_0 + EVNT_RESET_PRODUCT:
				EXCDISPLAY( ProcessEventGuiResetProduct()); 
				break;
			case WAIT_OBJECT_0 + EVNT_GUI_PRODUCTION:
				EXCDISPLAY( ProcessEventGuiProduction());
				break;
			case WAIT_OBJECT_0 + EVNT_GUI_QUALITY_RELEASE:
				EXCDISPLAY( ProcessEventGuiQualityRelease());  
				break;
			case WAIT_OBJECT_0 + EVNT_GUI_QUALITY_RETEST:
				EXCDISPLAY( ProcessEventGuiQualityRetest());  
				break;
			case WAIT_OBJECT_0 + EVNT_GUI_QUALITY_MASTER:
				EXCDISPLAY( ProcessEventGuiQualityMaster());  
				break;
			case WAIT_OBJECT_0 + EVNT_GUI_EXPERTISE_STEP_MODE:
				EXCDISPLAY( ProcessEventGuiExpertiseStepMode());
				break;
			case WAIT_OBJECT_0 + EVNT_GUI_EXPERTISE_GO_MODE:
				EXCDISPLAY( ProcessEventGuiExpertiseGoMode());   
				break;
			case WAIT_OBJECT_0 + EVNT_GUI_EXPERTISE_SEQUENCE_CREATED:
				EXCDISPLAY( ProcessEventGuiExpertiseSequenceCreated());
				break;
			case WAIT_OBJECT_0 + EVNT_GUI_EXPERTISE_RNR:
				EXCDISPLAY( ProcessEventGuiExpertiseRnR());      
				break;
			case WAIT_OBJECT_0 + EVNT_TEST_SEQUENCE_RUN: 
				sprintf( barcode, "TESTBARCODE%04X", rand());
				EXCDISPLAY( ProcessEventTestSequenceRun( barcode));
				break;
			case WAIT_OBJECT_0 + EVNT_JIG_ITEM_INSERTED_:
				EXCDISPLAY( ProcessEventJigItemInserted()); 
				break;
			case WAIT_OBJECT_0 + EVNT_EXPERTISE_STEP_MODE_REPEAT:
				EXCDISPLAY( ProcessEventGuiExpertiseStepSequence(STEP_SEQUENCE_REPEAT));
				break;
			case WAIT_OBJECT_0 + EVNT_EXPERTISE_STEP_MODE_NEXT:
				EXCDISPLAY( ProcessEventGuiExpertiseStepSequence(STEP_SEQUENCE_NEXT));  
				break;
			case WAIT_OBJECT_0 + EVNT_EXPERTISE_STEP_MODE_BACK:
				EXCDISPLAY( ProcessEventGuiExpertiseStepSequence(STEP_SEQUENCE_BACK));  
				break;
			case WAIT_OBJECT_0 + EVNT_EXPERTISE_STEP_MODE_STOP:
			case WAIT_OBJECT_0 + EVNT_GUI_KEY_ESC_PRESSED:
				EXCDISPLAY( ProcessEventGuiExpertiseStepSequence(STEP_SEQUENCE_CANCEL));  
				break;
			case WAIT_OBJECT_0 + EVNT_STOP_THREAD:
				b_loop_stop = TRUE;
				break;
			case WAIT_TIMEOUT:
				break;
			case WAIT_FAILED:
				EXCTHROW(-2, "Thread_Automat Fault");
				break;
		}	

		fncUnlock();
		is_locked = FALSE;

	}while(!b_loop_stop);

Error:
	if( is_locked) fncUnlock();
	EXCDISPLAY(pexception);
	ExitThread(THREAD_EXIT_CODE);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "JigPanelBarcode"
static SElExceptionPtr JigPanelBarcode(char* barcode, int32_t* pError)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	bool_t			isCorrect = FALSE;
	int32_t			master_id;

	pexception = gs_pJig->jig_GetItemCode(gs_pJig, "", 0, BARCODE_BUFFER_SIZE, barcode, TIMEOUT);
	if(pexception)
	{	
		EXCDELETE(pexception);
		PANEL_MSG( PANEL_HELP2, _("BarCode Reading Failed!"));
		if(pError) *pError = -1;
		CHECK_ERR( *pError);
	}
	else if(gs_Automat.Mode==AUTOMAT_PRODUCTION && gs_Automat.master_active && gs_Automat.masterpart)
	{
		EXCCHECK( gs_pLabels->GetMasterBarCodeStatus(gs_pLabels, barcode, &isCorrect, &master_id));
		if(!isCorrect)
		{
			PANEL_MSG( PANEL_HELP2, _("Invalid Master BarCode"));
			if(pError) *pError = -1;
			CHECK_ERR( *pError);
		}
		else if(gs_pDbs)
		{
			char testmaster_form_xml[MAX_PATHNAME_LEN];

			/* set mode */
			gs_Automat.Mode = AUTOMAT_MASTERPART;

			EXCCHECKCVI( GetProjectDir(testmaster_form_xml));
			strcat(testmaster_form_xml, PATH_TESTMASTER_FILE_FORM_XML); 

			/* create test sequence for master_id */
			EXCCHECK( gs_pDbs->Export->GetTestSeqXML(gs_pDbs->Export, master_id, testmaster_form_xml));

			/* load testsequence */
			EXCCHECK( LoadTestSequence(testmaster_form_xml, gs_Automat.pTestSeq, gs_Modules, FALSE, pError)); 
			CHECK_ERR( *pError);

			gs_Automat.TestSeqMode = TESTSEQ_MASTERPART;
		}
	}
	else
	{
		EXCCHECK( gs_pLabels->CheckBarCode(gs_pLabels, "Label:Check", -1, barcode, &isCorrect, NULL));
		if(!isCorrect)
		{
			PANEL_MSG( PANEL_HELP2, _("Invalid BarCode"));
			if(pError) *pError = -1;
			CHECK_ERR( *pError);
		}
		else if(gs_Automat.Mode==AUTOMAT_PRODUCTION && gs_Automat.retest_active)
		{
			bool_t tested;

			EXCCHECK( gs_pLabels->GetBarCodeStatus(gs_pLabels, barcode, &tested, NULL));
			if(tested)
			{
				PANEL_MSG( PANEL_HELP2, _("BarCode was tested"));
				if(pError) *pError = -1;
				CHECK_ERR( *pError);
			}
		}
		else if(gs_Automat.Mode==AUTOMAT_QUALITY_RETEST)
		{
			bool_t tested, failed;

			EXCCHECK( gs_pLabels->GetBarCodeStatus(gs_pLabels, barcode, &tested, &failed));
			if(!tested)
			{
				PANEL_MSG( PANEL_HELP2, _("BarCode has not been tested"));
				if(pError) *pError = -1;
				CHECK_ERR( *pError);
			}
#if 0
			else if(!failed)
			{
				PANEL_MSG( PANEL_HELP2, _("BarCode last result not failed"));
				if(pError) *pError = -1;
				CHECK_ERR( *pError);
			}
#endif
		}
	}

Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "JigPanelInsert"
static SElExceptionPtr JigPanelInsert(void)
{
	SElExceptionPtr		pexception = NULL;
	int32_t				error = 0;

	pexception = gs_pJig->jig_LockItem(gs_pJig, "", TIMEOUT);
	if( pexception)
	{
		SElExceptionPtr pexc_tmp = NULL;

		pexc_tmp = gs_pJig->jig_UnlockItem(gs_pJig, "", TIMEOUT);
		EXCDELETE( pexc_tmp);

		EXCCHECK( pexception);
	}
	
	pexception = gs_pJig->jig_ConnectToItem(gs_pJig, "", TIMEOUT);
	if( pexception)
	{
		SElExceptionPtr pexc_tmp = NULL;

		pexc_tmp = gs_pJig->jig_DisconnectFromItem(gs_pJig, "", TIMEOUT);
		EXCDELETE( pexc_tmp);

		Sleep(UNLOCK_DELAY);

		pexc_tmp = gs_pJig->jig_UnlockItem(gs_pJig, "", TIMEOUT); 
		EXCDELETE( pexc_tmp);

		EXCCHECK( pexception);
	}

Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "JigPanelRelease"
static SElExceptionPtr JigPanelRelease(bool_t fault)
{
	SElExceptionPtr		pexception = NULL;
	int32_t				error = 0;

	if(fault 
	   && gs_Automat.release_mode==E_PRM_QUALITY 
	   && gs_Automat.Mode==AUTOMAT_PRODUCTION)
	{
		goto Error;
	}

	if(gs_Automat.label_active)
	{
		SPrinterPtr	pprinter = NULL;
		int32_t		status;
		bool_t		help = TRUE;
#if 0
		char*		p2active_printer_cpy = NULL;
		char*		p2next = NULL;
		char*		p2printer = NULL;

		if(fault) /* wait for printer label */
			Sleep(400);

		p2active_printer_cpy = (char*) malloc( (strlen(gs_Automat.active_printer) + 1) * sizeof(char));
		EXCCHECKALLOC( p2active_printer_cpy);
		strcpy(p2active_printer_cpy, gs_Automat.active_printer);
		p2printer = p2active_printer_cpy;

		p2next = strchr(p2printer, ',');
		if (p2next)
		{
			*p2next = '\0';
			p2next++;
		}
		while (p2printer != NULL && *p2printer != '\0')
		{
			EXCCHECK( gs_pPrinters->GetPrinterByName(gs_pPrinters, p2printer, &pprinter));
			if (pprinter)
			{
				do
				{
					Sleep(100);
					pexception = pprinter->GetStatus(pprinter, &status);
					if (pexception && pexception->GetErrorCode(pexception) == -22)
					{
						EXCDELETE( pexception);
						break;
					}
					else
						EXCCHECK( pexception);
					
					if((status&0xFF)!=0 && help)
					{
						PANEL_MSG( PANEL_HELP2, _("Take Label from Printer"));
						help = FALSE;
					}
				}while((status&0xFF)!=0);
			}

			p2printer = p2next;
			p2next = strchr(p2printer, ',');
			if (p2next)
			{
				*p2next = '\0';
				p2next++;
			}
		}
#else
	
		if(fault) /* wait for printer label */
			Sleep(400);

		EXCCHECK( gs_pPrinters->GetFirstPrinter(gs_pPrinters, &pprinter));
		while(pprinter!=NULL)
		{
			do
			{
				Sleep(100);
				pexception = pprinter->GetStatus(pprinter, &status);
				if (pexception && pexception->GetErrorCode(pexception) == -22)
				{
					EXCDBGSTR( pexception);
					break;
				}
				else
					EXCCHECK( pexception);
				
				if((status&0xFF)!=0 && help)
				{
					PANEL_MSG( PANEL_HELP2, _("Take Label from Printer"));
					help = FALSE;
				}
			}while((status&0xFF)!=0);

			EXCCHECK( gs_pPrinters->GetNextPrinter(gs_pPrinters, &pprinter));
		}
#endif
	}

	if(fault && gs_Automat.release_mode==E_PRM_NOK)
	{
		PANEL_MSG( PANEL_HELP2, _("Press NOK Button"));
		/* wait for NOK button */
		EXCCHECK( gs_pTester->NokCheck(gs_pTester, 3600000));
	}

	pexception = gs_pJig->jig_DisconnectFromItem(gs_pJig, "", TIMEOUT); 
	if( pexception)
	{
		SElExceptionPtr pexc_tmp = NULL;

		pexc_tmp = gs_pJig->jig_UnlockItem(gs_pJig, "", TIMEOUT);
		EXCDELETE( pexc_tmp);

		EXCCHECK( pexception);
	}
	
	Sleep(UNLOCK_DELAY);
	EXCCHECK( gs_pJig->jig_UnlockItem(gs_pJig, "", TIMEOUT)); 

	PANEL_MSG( PANEL_HELP2, _("Take Control Panel"));

Error:
	EXCRETHROW( pexception);  
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::GetEventHandle"
static SElExceptionPtr GetEventHandle(void)
{
	SElExceptionPtr	pexception = NULL;
   
	if ( gs_EventFactory )
	{
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_PRODUCTION",
		                                   &gs_EventHandle[EVNT_GUI_PRODUCTION]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_QUALITY_RELEASE",
		                                   &gs_EventHandle[EVNT_GUI_QUALITY_RELEASE]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_QUALITY_RETEST",
		                                   &gs_EventHandle[EVNT_GUI_QUALITY_RETEST]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_QUALITY_MASTER",
		                                   &gs_EventHandle[EVNT_GUI_QUALITY_MASTER]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_EXPERTISE_STEP_MODE",
		                                   &gs_EventHandle[EVNT_GUI_EXPERTISE_STEP_MODE]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_EXPERTISE_GO_MODE",
		                                   &gs_EventHandle[EVNT_GUI_EXPERTISE_GO_MODE]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_EXPERTISE_SEQUENCE_CREATED",
		                                   &gs_EventHandle[EVNT_GUI_EXPERTISE_SEQUENCE_CREATED]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_EXPERTISE_RNR",
		                                   &gs_EventHandle[EVNT_GUI_EXPERTISE_RNR]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_TEST_SEQUENCE_RUN",
		                                   &gs_EventHandle[EVNT_TEST_SEQUENCE_RUN]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_PRODUCT_SELECTED",
		                                   &gs_EventHandle[EVNT_GUI_PRODUCT_SELECTED]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_EXPERTISE_STEP_MODE_NEXT",
		                                   &gs_EventHandle[EVNT_EXPERTISE_STEP_MODE_NEXT]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_EXPERTISE_STEP_MODE_REPEAT",
		                                   &gs_EventHandle[EVNT_EXPERTISE_STEP_MODE_REPEAT]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_EXPERTISE_STEP_MODE_BACK",
		                                   &gs_EventHandle[EVNT_EXPERTISE_STEP_MODE_BACK]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_EXPERTISE_STEP_MODE_STOP",
		                                   &gs_EventHandle[EVNT_EXPERTISE_STEP_MODE_STOP]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_GUI_KEY_ESC_PRESSED",
		                                   &gs_EventHandle[EVNT_GUI_KEY_ESC_PRESSED]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_RESET_PRODUCT",
		                                   &gs_EventHandle[EVNT_RESET_PRODUCT]));
		EXCCHECK( gs_EventFactory->GetEvent(gs_EventFactory,
		                                   "EVNT_JIG_ITEM_INSERTED",
		                                   &gs_EventHandle[EVNT_JIG_ITEM_INSERTED_]));
	}
    
Error:
	EXCRETHROW(pexception);
}  

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "EventFunctionCallback"
static SElExceptionPtr EventFunctionCallback( const char* eventName, void* pData)
{
	SElExceptionPtr	pexception = NULL;

	EXCCHECK( fncLock());

	if(0==strcmp(eventName, "EVNT_JIG_LOADED")
	 || 0==strcmp(eventName, "EVNT_JIG_UNLOADED") )
	{
		EXCCHECK( ProcessEventGuiProductSelected(!gs_Automat.disabled, TRUE, TRUE));
		if( gs_EventFactory && !gs_Automat.disabled)
		{
			EXCCHECK( gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_PLUGIN_LEAVE", NULL));
		}
	}
	else if(0==strcmp(eventName, "EVNT_JIG_ITEM_RELEASED"))
	{
		EXCCHECK( ProcessEventJigItemReleased()); 
	}

Error:   
	fncUnlock();
	EXCRETHROW( pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "EventFunctionPluginCallback"
static SElExceptionPtr EventFunctionPluginCallback( const char* eventName, void* pData)
{
	int32_t			error = 0;
	SElExceptionPtr	pexception = NULL;
	const char*		uuid = NULL;

	EXCCHECK( fncLock());

	if( pData)
		uuid = ((SElEventDataPtr)pData)->GetStringPtr(pData);

	if(0==strcmp(eventName, "EVNT_PLUGIN_RUN"))
	{
		if( uuid &&( 0==strcmp(uuid, PLUGIN_MAINTENANCE)
					 || 0==strcmp(uuid, PLUGIN_REPORT) 
					 || 0==strcmp(uuid, PLUGIN_STATISTIC)
					 || 0==strcmp(uuid, PLUGIN_PRODUCT) ))
		{
			EXCCHECKCVI( PostDeferredCall(PostDeferredHidePanel, NULL));
			gs_Automat.disabled = TRUE;
		}
	}
	else if(0==strcmp(eventName, "EVNT_GUI_SHIFT"))
	{
		gs_Automat.shift_id = strtol(uuid, NULL, 10);

		if( gs_Automat.Mode==AUTOMAT_PRODUCTION && gs_Automat.shift_id!=0)
		{
			PANEL_MSG( PANEL_HELP1, _("Production")); 

			if( gs_Automat.box)
			{
				PANEL_MSG( PANEL_HELP2, _("Insert Empty Box"));
				INSERT_EMPTY_BOX();
			}
			else if( gs_Automat.masterpart)
				PANEL_MSG( PANEL_HELP2, _("Insert Master Panel"));
			else
				PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
		}
	}
	else if(0==strcmp(eventName, "EVNT_BOX_INSERTED"))
	{
		if(gs_Automat.box_active)
		{
			gs_Automat.box = FALSE;

			if(gs_Automat.shift_id==0)
			{
				PANEL_MSG( PANEL_HELP1, _("Select Shift"));  
				PANEL_MSG( PANEL_HELP2, "");
			}
			else if( gs_Automat.masterpart)
				PANEL_MSG( PANEL_HELP2, _("Insert Master Panel"));
			else
				PANEL_MSG( PANEL_HELP2, _("Insert Panel"));
		}
	}
	else if(0==strcmp(eventName, "EVNT_BOX_CHANGE"))
	{
		if(gs_Automat.box_active)
			gs_Automat.box = TRUE;
	}
	else if(0==strcmp(eventName, "EVNT_PAUSE_STARTED"))
	{
		EXCCHECKCVI( PostDeferredCall(PostDeferredHidePanel, NULL));
		gs_Automat.disabled = TRUE;

		gs_Automat.pause = TRUE;

		EXCCHECK( ProcessEventGuiProductSelected(TRUE, FALSE, FALSE));
		if( gs_EventFactory)
		{
			EXCCHECK( gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_PLUGIN_LEAVE", NULL));
		}
	}
	else if(0==strcmp(eventName, "EVNT_PAUSE_STOPED"))
	{
		gs_Automat.pause = FALSE;

		EXCCHECK( ProcessEventGuiProductSelected(TRUE, FALSE, FALSE));
		if( gs_EventFactory)
		{
			EXCCHECK( gs_EventFactory->PulseEvent(gs_EventFactory, "EVNT_PLUGIN_LEAVE", NULL));
		}

		EXCCHECKCVI( PostDeferredCall(PostDeferredDisplayPanel, NULL));
		gs_Automat.disabled = FALSE;
	}
	else if(0==strcmp(eventName, "EVNT_GUI_PRODUCTION")
		  || 0==strcmp(eventName, "EVNT_GUI_PRODUCT_SELECTED"))
	{
		if(!gs_Automat.pause)
		{
			EXCCHECKCVI( PostDeferredCall(PostDeferredDisplayPanel, NULL));
			gs_Automat.disabled = FALSE;
		}
		else
		{
			EXCCHECKCVI( PostDeferredCall(PostDeferredHidePanel, NULL));
			gs_Automat.disabled = TRUE;
		}
	}
	else if( 0==strcmp(eventName, "EVNT_GUI_EXPERTISE_STEP_MODE")
		  || 0==strcmp(eventName, "EVNT_GUI_EXPERTISE_GO_MODE")
		  || 0==strcmp(eventName, "EVNT_GUI_EXPERTISE_RNR")
		  || 0==strcmp(eventName, "EVNT_GUI_QUALITY_MASTER")
		  || 0==strcmp(eventName, "EVNT_GUI_QUALITY_RETEST"))
	{
		EXCCHECKCVI( PostDeferredCall(PostDeferredDisplayPanel, NULL));
		gs_Automat.disabled = FALSE;
	}

Error:   
	fncUnlock();
	EXCRETHROW( pexception);
}

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "RegisterEventFunction"
static SElExceptionPtr RegisterEventFunction(void)
{
	SElExceptionPtr	pexception = NULL;
	
	if ( gs_EventFactory )
	{
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_JIG_LOADED",
														 EventFunctionCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_JIG_UNLOADED",
														 EventFunctionCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_JIG_ITEM_RELEASED",
														 EventFunctionCallback));	
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_PLUGIN_RUN",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_GUI_SHIFT",
														 EventFunctionPluginCallback));	
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_PAUSE_STARTED",
														 EventFunctionPluginCallback));	
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_PAUSE_STOPED",
														 EventFunctionPluginCallback));	
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_GUI_PRODUCTION",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_GUI_EXPERTISE_STEP_MODE",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_GUI_EXPERTISE_GO_MODE",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_GUI_EXPERTISE_RNR",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_GUI_QUALITY_MASTER",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_GUI_QUALITY_RETEST",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_GUI_PRODUCT_SELECTED",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_BOX_CHANGE",
														 EventFunctionPluginCallback));
		EXCCHECK( gs_EventFactory->RegisterEventFunction(gs_EventFactory,
														 "EVNT_BOX_INSERTED",
														 EventFunctionPluginCallback));
	}

Error:
	EXCRETHROW(pexception);
}	/* RegisterEventFunction */

/*---------------------------------------------------------------------------*/
#undef __FUNC__
#define __FUNC__ "LoadConfiguration"
static SElExceptionPtr LoadConfiguration(
   const char*   fileName
)
{
	SElExceptionPtr pexception = NULL;
	int32_t			error = 0;
	HRESULT         hr = 0;
	CAObjHandle     pxml  = 0;
	CAObjHandle     pnode = 0;
	CAObjHandle     pparameter = 0;   
	const char*     pfile_name = (fileName) ? fileName : "\\automat.xml";
	VBOOL         	is_xml_success = 1;
	VARIANT         pfile_name_var = CA_VariantEmpty();
	char*         	ptext= NULL;
	char			path[MAX_PATHNAME_LEN ];  

	EXCCHECKCVI( GetModuleDir (__CVIUserHInst, path));  
	strcat(path, pfile_name);
	
	EXCCHECKMSXML( MSXML_NewDOMDocumentIXMLDOMDocument (NULL, 1, LOCALE_NEUTRAL, 0, &pxml));
	EXCCHECKCVI( CA_VariantSetCString(  &pfile_name_var, path));
	EXCCHECKMSXMLLOAD( MSXML_IXMLDOMDocumentload (pxml, NULL, pfile_name_var, &is_xml_success));
	EXCCHECKMSXML( MSXML_IXMLDOMDocumentselectSingleNode (pxml, NULL, "//plugin[@id='"PLUGIN_AUTOMAT"']", &pnode));   
	
	EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "settings/master_panel", &pparameter));	
	if(pparameter!=0)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		if(ptext)
		{
			if(0==strcmp(ptext, "TRUE"))
				gs_Automat.master_active = TRUE;

			CA_FreeMemory(ptext);
			ptext=NULL;
		}

		EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
		pparameter = 0;
	}

	EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "settings/retest_quality", &pparameter));	
	if(pparameter!=0)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		if(ptext)
		{
			if(0==strcmp(ptext, "TRUE"))
				gs_Automat.retest_active = TRUE;

			CA_FreeMemory(ptext);
			ptext=NULL;
		}

		EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
		pparameter = 0;
	}

	EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "settings/box", &pparameter));	
	if(pparameter!=0)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		if(ptext)
		{
			if(0==strcmp(ptext, "TRUE"))
				gs_Automat.box_active = TRUE;

			CA_FreeMemory(ptext);
			ptext=NULL;
		}

		EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
		pparameter = 0;
	}

	EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "settings/panel_release", &pparameter));	
	if(pparameter!=0)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		if(ptext)
		{
			if(0==strcmp(ptext, "QUALITY"))
				gs_Automat.release_mode = E_PRM_QUALITY;
			else if(0==strcmp(ptext, "NOK"))
				gs_Automat.release_mode = E_PRM_NOK;
			else
				gs_Automat.release_mode = E_PRM_FALSE;

			CA_FreeMemory(ptext);
			ptext=NULL;
		}

		EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
		pparameter = 0;
	}

	EXCCHECKMSXML( MSXML_IXMLDOMNodeselectSingleNode (pnode, NULL, "settings/printer_label", &pparameter));	
	if(pparameter!=0)
	{
		EXCCHECKMSXML( MSXML_IXMLDOMNodeGettext (pparameter, NULL, &ptext));
		if(ptext)
		{
			if(0==strcmp(ptext, "TRUE"))
				gs_Automat.label_active = TRUE;

			CA_FreeMemory(ptext);
			ptext=NULL;
		}

		EXCCHECKCVI( CA_DiscardObjHandle(pparameter));
		pparameter = 0;
	}

Error:
	CA_VariantClear(&pfile_name_var);
	if (pnode) CA_DiscardObjHandle(pnode);
	if (pxml) CA_DiscardObjHandle(pxml);
	EXCRETHROW( pexception);
}

/*---------------------------------------------------------------------------*/
#if defined(_CVI_DLL_) || \
	defined(_WINDLL)
void DiscardUIObjectsForDLL (void)
{
	/* Discard the panels loaded in InitUIForDLL */
}

int __stdcall DllMain(
	HINSTANCE hinstDLL,
	DWORD fdwReason,
	LPVOID lpvReserved
)
{
	switch (fdwReason)
		{
		case DLL_PROCESS_ATTACH:
#if (!defined(_CVI_)&&defined(_DEBUG))
			//_CrtSetBreakAlloc(77);
#endif
			if (InitCVIRTE (hinstDLL, 0, 0) == 0)		
				return 0;	/* out of memory */
			break;
		case DLL_PROCESS_DETACH:
			if (!CVIRTEHasBeenDetached())		/* Do not call CVI functions if cvirte.dll has already been detached. */
			{
				DiscardUIObjectsForDLL ();		/* Discard the panels loaded in InitUIForDLL */
				CloseCVIRTE ();		
			}
#if !defined(_CVI_) && defined(_DEBUG) && defined(DUMP_MEMORY_LEAKS)
			_CrtDumpMemoryLeaks();
#endif
			break;
		}

	return 1;
}

int __stdcall DllEntryPoint(
	HINSTANCE hinstDLL,
	DWORD fdwReason,
	LPVOID lpvReserved
)
{
	/* Included for compatibility with Borland */

	 return DllMain (hinstDLL, fdwReason, lpvReserved);
}

#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::Initialize"
PLUGIN_API SElExceptionPtr PLUGIN_INIT_NAME_CODE( SPluginArgsPtr a_pPluginArgs )
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	const char*		pconfiguration_file = NULL;
	int32_t			main_panel = 0;
	int				monitor_id, top, height;  

	InitializeCriticalSection( &_Lock);

	EXCCHECK( a_pPluginArgs->GetArg( a_pPluginArgs,
									 "MainPanel",
									 sizeof(main_panel),
									 &main_panel));

	EXCCHECK( a_pPluginArgs->GetArg( a_pPluginArgs,
									 "WindowHandle",
									 sizeof(hWnd),
									 &hWnd));
	
	EXCCHECK( a_pPluginArgs->GetArg( a_pPluginArgs,
	                        "Modules",
	                        sizeof(SObjListPtr),
	                        &gs_Modules));

	/* gettext */
	if(gs_Modules)
	{
		gs_pLanguage = (SLanguagePtr)gs_Modules->Get(gs_Modules, MODULE_LANGUAGE);  
		if(gs_pLanguage)
		{
			char pathname[MAX_PATHNAME_LEN];
			EXCCHECKCVI( GetProjectDir( pathname));
			strcat(pathname, "\\lang");
			LANGUAGE_PTR->bindtextdomain (LANGUAGE_PTR, PACKAGE, pathname);
			LANGUAGE_PTR->textdomain (LANGUAGE_PTR, PACKAGE);
		}
	}
	
	EXCCHECKCVI( gs_panel[AUTOMAT] = LoadPanelEx (main_panel, "automat.uir", AUTOMAT, __CVIUserHInst));

	EXCCHECK( a_pPluginArgs->SetArg(a_pPluginArgs, "AutomatPanel", ARG_INT32, &gs_panel[PANEL]));  

	EXCCHECKCVI( GetSystemAttribute( ATTR_PRIMARY_MONITOR, &monitor_id));
    EXCCHECKCVI( GetMonitorAttribute (monitor_id, ATTR_TOP,    &top));
    EXCCHECKCVI( GetMonitorAttribute( monitor_id, ATTR_HEIGHT, &height));
	
	EXCCHECKCVI( SetPanelAttribute (gs_panel[AUTOMAT], ATTR_TOP, top + height - 80 - 479));
	EXCCHECKCVI( SetPanelAttribute (gs_panel[AUTOMAT], ATTR_LEFT, 11));

	EXCCHECK( a_pPluginArgs->GetArg( a_pPluginArgs,
									 "EventFactory",
									 sizeof(SElEventFactoryPtr),
									 &gs_EventFactory));
	
	if(gs_Modules)
	{
		gs_pJig = (SJigPtr)gs_Modules->Get(gs_Modules, MODULE_JIG_CLASS); 
		gs_pLabels = (SLabelListPtr)gs_Modules->Get(gs_Modules, MODULE_LABELS);
		gs_pDbs = (SDBSPtr)gs_Modules->Get(gs_Modules, MODULE_DBS);
		gs_pBox = (SBoxPtr)gs_Modules->Get(gs_Modules, MODULE_BOX);
		gs_pTester = (STesterPtr)gs_Modules->Get(gs_Modules, MODULE_TESTER);
		gs_pPrinters = gs_Modules->Get(gs_Modules, MODULE_PRINTERS);
	}

Error:	
	EXCRETHROW( pexception);
}


#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::Run"
PLUGIN_API SElExceptionPtr PLUGIN_RUN_NAME_CODE( SPluginArgsPtr a_pPluginArgs, const char* uuid)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;

	EXCCHECK( testseq_new(&gs_Automat.pTestSeq));
	EXCCHECK( a_pPluginArgs->SetArg(a_pPluginArgs, "TestSequence", ARG_PTR, gs_Automat.pTestSeq));  
	EXCCHECK( LoadConfiguration(NULL));

	EXCCHECK( GetEventHandle()); 
	EXCCHECK( RegisterEventFunction());

	EXCCHECKCVI( DisplayPanel(gs_panel[AUTOMAT]));

	gs_EventHandle[EVNT_STOP_THREAD] = CreateEvent( NULL, 1, 0, NULL);
	if (gs_EventHandle[EVNT_STOP_THREAD] == NULL)
		EXCTHROW(-1, "Create event failed");

	EXCCHECK( ThreadStart(Thread_Automat, NULL, &gs_hThread, NULL)); 
	
	if(gs_Automat.master_active)
		gs_Automat.masterpart = TRUE;
	
	if(gs_Automat.box_active)
		gs_Automat.box = TRUE;

	EXCCHECK( ProcessEventGuiProduction());
		
Error:	
	EXCRETHROW( pexception);
}


#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::Leave"
PLUGIN_API SElExceptionPtr PLUGIN_LEAVE_NAME_CODE( SPluginArgsPtr a_pPluginArgs, const char* uuid)
{
	SElExceptionPtr	pexception = NULL;

//Error:	
	EXCRETHROW( pexception);
}

#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::Shutdown"
PLUGIN_API SElExceptionPtr PLUGIN_SHUTDOWN_NAME_CODE( SPluginArgsPtr a_pPluginArgs)
{
	SElExceptionPtr	pexception = NULL;
	int32_t			error = 0;
	time_t			_start_clock = clock();
	bool_t			b_timeout = FALSE;
 	
	EXCCHECK( ThreadStop( &gs_hThread, &gs_EventHandle[EVNT_STOP_THREAD]));
	
	EXCCHECK( gs_Automat.pTestSeq->UnLoad(gs_Automat.pTestSeq));  
	EXCCHECK( testseq_delete(&gs_Automat.pTestSeq)); 
	
	if(gs_panel[AUTOMAT])
		EXCCHECKCVI( DiscardPanel(gs_panel[AUTOMAT]));

	DeleteCriticalSection( &_Lock);

Error:	
	EXCRETHROW( pexception);
}


#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::Info"
PLUGIN_API SElExceptionPtr PLUGIN_GETINFO_NAME_CODE( SPluginInfoPtr* a_pInfo)
{
	SElExceptionPtr	pexception = NULL;  
	
	if(a_pInfo) EXCCHECK( (*a_pInfo)->SetInfoData(*a_pInfo, &gs_InfoData));
	
Error:	
	EXCRETHROW( pexception);
}

#undef __FUNC__
#define __FUNC__ "{Automat Plugin}::Attribute"
PLUGIN_API SElExceptionPtr PLUGIN_GETATTR_NAME_CODE( uint32_t  attrID, uint32_t size, void* value)
{
	return NULL;
}

#endif 
